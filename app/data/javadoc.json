{
  "current_release":                     "19",

  "java-documentation":                  "https://docs.oracle.com/en/java/javase/@@CURRENT_RELEASE@@/",
  "javadoc_root":                        "https://docs.oracle.com/en/java/javase/@@CURRENT_RELEASE@@/docs/api/",

  "security-standard-names":             "https://docs.oracle.com/en/java/javase/@@CURRENT_RELEASE@@/docs/specs/security/standard-names.html",
  "jre-jdk-cryptoroadmap":               "https://www.java.com/en/jre-jdk-cryptoroadmap.html",


  "sealed-classes":                      "https://docs.oracle.com/en/java/javase/@@CURRENT_RELEASE@@/language/sealed-classes-and-interfaces.html",
  "text-blocks":                         "https://docs.oracle.com/en/java/javase/@@CURRENT_RELEASE@@/text-blocks/index.html",
  "jpackage":                            "https://docs.oracle.com/en/java/javase/@@CURRENT_RELEASE@@/docs/specs/man/jpackage.html",
  "java-api-docs":                       "https://docs.oracle.com/en/java/javase/@@CURRENT_RELEASE@@/docs/api/index.html",
  "specification":                       "https://docs.oracle.com/en/java/javase/@@CURRENT_RELEASE@@/docs/api/index.html",
  "release-notes":                       "https://www.oracle.com/java/technologies/javase/@@CURRENT_RELEASE@@-relnotes.html",
  "jvm-guide":                           "https://docs.oracle.com/en/java/javase/@@CURRENT_RELEASE@@/vm/java-virtual-machine-technology-overview.html",
  
  "gc-tuning":                        { "link": "https://docs.oracle.com/en/java/javase/@@CURRENT_RELEASE@@/gctuning/introduction-garbage-collection-tuning.html", 
                                        "text": "HotSpot Virtual Machine Garbage Collection Tuning Guide"},

  "cds":                                 "https://docs.oracle.com/en/java/javase/@@CURRENT_RELEASE@@/vm/class-data-sharing.html",
  "sharing-shared-archive":              "https://docs.oracle.com/en/java/javase/@@CURRENT_RELEASE@@/docs/specs/man/java.html#sharing-a-shared-archive-across-multiple-application-processes",
  "javase-all-specs":                    "https://docs.oracle.com/javase/specs/index.html",
  "secure-coding-guidelines":            "https://www.oracle.com/java/technologies/javase/seccodeguide.html",
  "java-security-standard-names-spec":   "https://docs.oracle.com/en/java/javase/@@CURRENT_RELEASE@@/docs/specs/security/standard-names.html",
  "java-security-cipher-algorithms":     "https://docs.oracle.com/en/java/javase/@@CURRENT_RELEASE@@/docs/specs/security/standard-names.html#cipher-algorithms",
  "java-security-overview":              "https://docs.oracle.com/en/java/javase/@@CURRENT_RELEASE@@/security/java-security-overview1.html",
  "java-se-general-faq":                 "https://www.oracle.com/java/technologies/faqs-jsp.html",
  "javadoc-faq":                         "https://www.oracle.com/java/technologies/javase/javadoc-faq.html",
  "sun-package-faq":                     "https://www.oracle.com/java/technologies/faq-sun-packages.html",
  "se-releases-faq":                     "https://blogs.oracle.com/java-platform-group/oracle-java-se-releases-faq",
  "oracle-se-licensing-faq":             "https://www.oracle.com/be/java/technologies/javase/jdk-faqs.html",
  "oracle-se-subscription-faq":          "https://www.oracle.com/java/technologies/java-se-subscription-faq.html",
  "z-garbage-collector":                 "https://docs.oracle.com/en/java/javase/11/gctuning/z-garbage-collector1.html",
  "openjdk-developer-guide":             "https://openjdk.org/guide/",
  "amber.project.page":                  "https://openjdk.org/projects/amber/",
  "old-java-coding-conventions":         "https://www.oracle.com/java/technologies/javase/codeconventions-contents.html",
  "jca-reference-guide":                 "https://docs.oracle.com/en/java/javase/@@CURRENT_RELEASE@@/security/java-cryptography-architecture-jca-reference-guide.html",
  "java-language-specification":         "https://docs.oracle.com/javase/specs/jls/se@@CURRENT_RELEASE@@/html/index.html",
  "floating-point-types":                "https://docs.oracle.com/javase/specs/jls/se@@CURRENT_RELEASE@@/html/jls-4.html#jls-4.2.3",
  "collections-api-design-faq":          "https://docs.oracle.com/en/java/javase/@@CURRENT_RELEASE@@/docs/api/java.base/java/util/doc-files/coll-designfaq.html",

  "jdk-tools-specs":                     "https://docs.oracle.com/en/java/javase/@@CURRENT_RELEASE@@/docs/specs/man/index.html",
  "javac":                               "https://docs.oracle.com/en/java/javase/@@CURRENT_RELEASE@@/docs/specs/man/javac.html",
  "javap":                               "https://docs.oracle.com/en/java/javase/@@CURRENT_RELEASE@@/docs/specs/man/javap.html",
  "javadoc":                             "https://docs.oracle.com/en/java/javase/@@CURRENT_RELEASE@@/docs/specs/man/javadoc.html",
  "java":                                "https://docs.oracle.com/en/java/javase/@@CURRENT_RELEASE@@/docs/specs/man/java.html",
  "jshell":                              "https://docs.oracle.com/en/java/javase/@@CURRENT_RELEASE@@/docs/specs/man/jshell.html",
  "jar":                                 "https://docs.oracle.com/en/java/javase/@@CURRENT_RELEASE@@/docs/specs/man/jar.html",
  "jlink":                               "https://docs.oracle.com/en/java/javase/@@CURRENT_RELEASE@@/docs/specs/man/jlink.html",
  "jmod":                                "https://docs.oracle.com/en/java/javase/@@CURRENT_RELEASE@@/docs/specs/man/jmod.html",
  "jdeps":                               "https://docs.oracle.com/en/java/javase/@@CURRENT_RELEASE@@/docs/specs/man/jdeps.html",
  "jdeprscan":                           "https://docs.oracle.com/en/java/javase/@@CURRENT_RELEASE@@/docs/specs/man/jdeprscan.html",
  "jfr":                                 "https://docs.oracle.com/en/java/javase/@@CURRENT_RELEASE@@/docs/specs/man/jfr.html",
  "jconsole":                            "https://docs.oracle.com/en/java/javase/@@CURRENT_RELEASE@@/docs/specs/man/jconsole.html",
  "jps":                                 "https://docs.oracle.com/en/java/javase/@@CURRENT_RELEASE@@/docs/specs/man/jps.html",
  "jstat":                               "https://docs.oracle.com/en/java/javase/@@CURRENT_RELEASE@@/docs/specs/man/jstat.html",
  "jstatd":                              "https://docs.oracle.com/en/java/javase/@@CURRENT_RELEASE@@/docs/specs/man/jstatd.html",
  "keytool":                             "https://docs.oracle.com/en/java/javase/@@CURRENT_RELEASE@@/docs/specs/man/keytool.html",
  "jarsigner":                           "https://docs.oracle.com/en/java/javase/@@CURRENT_RELEASE@@/docs/specs/man/jarsigner.html",
  "kinit":                               "https://docs.oracle.com/en/java/javase/@@CURRENT_RELEASE@@/docs/specs/man/kinit.html",
  "klist":                               "https://docs.oracle.com/en/java/javase/@@CURRENT_RELEASE@@/docs/specs/man/klist.html",
  "ktab":                                "https://docs.oracle.com/en/java/javase/@@CURRENT_RELEASE@@/docs/specs/man/ktab.html",
  "jcmd":                                "https://docs.oracle.com/en/java/javase/@@CURRENT_RELEASE@@/docs/specs/man/jcmd.html",
  "jdb":                                 "https://docs.oracle.com/en/java/javase/@@CURRENT_RELEASE@@/docs/specs/man/jdb.html",
  "jhsdb":                               "https://docs.oracle.com/en/java/javase/@@CURRENT_RELEASE@@/docs/specs/man/jhsdb.html",
  "jinfo":                               "https://docs.oracle.com/en/java/javase/@@CURRENT_RELEASE@@/docs/specs/man/jinfo.html",
  "jmap":                                "https://docs.oracle.com/en/java/javase/@@CURRENT_RELEASE@@/docs/specs/man/jmap.html",
  "jstack":                              "https://docs.oracle.com/en/java/javase/@@CURRENT_RELEASE@@/docs/specs/man/jstack.html",

  "serialization-write-object":          "https://docs.oracle.com/en/java/javase/@@CURRENT_RELEASE@@/docs/specs/serialization/output.html#the-writeobject-method",
  "serialization-read-object":           "https://docs.oracle.com/en/java/javase/@@CURRENT_RELEASE@@/docs/specs/serialization/input.html#the-readobject-method",
  "serialization-read-resolve":          "https://docs.oracle.com/en/java/javase/@@CURRENT_RELEASE@@/docs/specs/serialization/input.html#the-readresolve-method",
  "serialization-write-replace":         "https://docs.oracle.com/en/java/javase/@@CURRENT_RELEASE@@/docs/specs/serialization/output.html#the-writereplace-method",

  "rfc-5246":                            "https://www.ietf.org/rfc/rfc5246.html",
  "rfc-8446":                            "https://www.ietf.org/rfc/rfc8446.html",
  "rfc-8017":                            "https://www.ietf.org/rfc/rfc8017.html",
  "ANSI-20X9.62":                        "https://standards.globalspec.com/std/1955141/ANSI%20X9.62",

  "ide-eclipse":  "https://www.eclipse.org/",
  "ide-netbeans": "https://netbeans.apache.org/",
  "ide-intellij": "https://www.jetbrains.com/idea/",

  
  "java.base":                           "java.base/module-summary.html",
  "java.lang":                           "java.base/java/lang/package-summary.html",
  "java.lang.annotation":                "java.base/java/lang/annotation/package-summary.html",
  "java.util":                           "java.base/java/util/package-summary.html",
  "java.io":                             "java.base/java/io/package-summary.html",
  "java.nio.file":                       "java.base/java/nio/file/package-summary.html",
  "java.util.function":                  "java.base/java/util/function/package-summary.html",
  "java.util.concurrent":                "java.base/java/util/concurrent/package-summary.html",
  "java.util.regex":                     "java.base/java/util/regex/package-summary.html",
  "java.sql":                            "java.sql/module-summary.html",
  "java.logging":                        "java.logging/module-summary.html",
  "java.transaction.xa":                 "java.transaction.xa/module-summary.html",
  "java.xml":                            "java.xml/module-summary.html",
  "java.prefs":                          "java.prefs/module-summary.html",
  "java.time":                           "java.base/java/time/package-summary.html",
  "java.time.chrono":                    "java.base/java/time/chrono/package-summary.html",
  "java.time.format":                    "java.base/java/time/format/package-summary.html",
  "java.time.temporal":                  "java.base/java/time/temporal/package-summary.html",
  "java.time.zone":                      "java.base/java/time/zone/package-summary.html",
  "java.util.logging":                   "java.logging/java/util/logging/package-summary.html",
  "java.awt":                            "java.desktop/java/awt/package-summary.html",
  "java.awt.color":                      "java.desktop/java/awt/color/package-summary.html",
  "java.awt.font":                       "java.desktop/java/awt/font/package-summary.html",
  "ForeignMemoryFunctionAPI":            "java.base/java/lang/foreign/package-summary.html",
  "Object":                              "java.base/java/lang/Object.html",
  "Object.clone()":                      "java.base/java/lang/Object.html#clone()",
  "Object.equals(Object)":               "java.base/java/lang/Object.html#equals(java.lang.Object)",
  "Object.finalize()":                   "java.base/java/lang/Object.html#finalize()",
  "Object.getClass()":                   "java.base/java/lang/Object.html#getClass()",
  "Object.hashCode()":                   "java.base/java/lang/Object.html#hashCode()",
  "Object.notify()":                     "java.base/java/lang/Object.html#notify()",
  "Object.notifyAll()":                  "java.base/java/lang/Object.html#notifyAll()",
  "Object.toString()":                   "java.base/java/lang/Object.html#toString()",
  "Object.wait()":                       "java.base/java/lang/Object.html#wait()",
  "Object.wait(long)":                   "java.base/java/lang/Object.html#wait(long)",
  "Object.wait(long,int)":               "java.base/java/lang/Object.html#wait(long,int)",

  "NullPointerException":                "java.base/java/lang/NullPointerException.html",

  "Override":                            "java.base/java/lang/Override.html",

  "AbstractMap":                         "java.base/java/util/AbstractMap.html",
  "AbstractMap.containsKey(Object)":     "java.base/java/util/AbstractMap.html#containsKey(java.lang.Object)",
  "AbstractMap.containsValue(Object)":   "java.base/java/util/AbstractMap.html#containsValue(java.lang.Object)",
  "AbstractMap.get(Object)":             "java.base/java/util/AbstractMap.html#get(java.lang.Object)",
  "AbstractMap.isEmpty()":               "java.base/java/util/AbstractMap.html#isEmpty()",
  "AbstractMap.put(K,V)":                "java.base/java/util/AbstractMap.html#put(K,V)",

  "HashMap":                             "java.base/java/util/HashMap.html",
  "HashMap.new":                         "java.base/java/util/HashMap.html#%3Cinit%3E()",

  "Cloneable":                           "java.base/java/lang/Cloneable.html",
  "CloneNotSupportedException":          "java.base/java/lang/CloneNotSupportedException.html",

  "Class":                               "java.base/java/lang/Class.html",
  "Class.getFields()":                   "java.base/java/lang/Class.html#getFields()",
  "Class.getInterfaces()":               "java.base/java/lang/Class.html#getInterfaces()",
  "Class.getMethods()":                  "java.base/java/lang/Class.html#getMethods()",
  "Class.getSimpleName()":               "java.base/java/lang/Class.html#getSimpleName()",
  "Class.getSuperclass()":               "java.base/java/lang/Class.html#getSuperclass()",
  "Class.isAnnotation()":                "java.base/java/lang/Class.html#isAnnotation()",
  "Class.isEnum()":                      "java.base/java/lang/Class.html#isEnum()",
  "Class.isInterface()":                 "java.base/java/lang/Class.html#isInterface()",

  "Record":                              "java.base/java/lang/Record.html",

  "System":                                                           "java.base/java/lang/System.html",
  "System.out":                                                       "java.base/java/lang/System.html#out",
  "System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)":  "java.base/java/lang/System.html#arraycopy(java.lang.Object,int,java.lang.Object,int,int)",

  "Long":                                "java.base/java/lang/Long.html",
  "Long.compareTo(Long)":                "java.base/java/lang/Long.html#compareTo(java.lang.Long)",
  "Long.compareUnsigned(int,int)":       "java.base/java/lang/Long.html#compareUnsigned(int,int)",
  "Long.divideUnsigned(int,int)":        "java.base/java/lang/Long.html#divideUnsigned(int,int)",

  "Arrays":                              "java.base/java/util/Arrays.html",
  "Arrays.asList()":                     "java.base/java/util/Arrays.html#asList(T...)",
  "Arrays.binarySearch()":               "java.base/java/util/Arrays.html#binarySearch(int%5B%5D,int)",
  "Arrays.equals()":                     "java.base/java/util/Arrays.html#equals(int%5B%5D,int%5B%5D)",
  "Arrays.fill()":                       "java.base/java/util/Arrays.html#fill(int%5B%5D,int)",
  "Arrays.sort()":                       "java.base/java/util/Arrays.html#sort(int%5B%5D)",
  "Arrays.parallelSort()":               "java.base/java/util/Arrays.html#parallelSort(int%5B%5D)",
  "Arrays.stream()":                     "java.base/java/util/Arrays.html#stream(int%5B%5D)",
  "Arrays.toString()":                   "java.base/java/util/Arrays.html#toString(int%5B%5D)",

  "BasicFileAttributes":                    "java.base/java/nio/file/attribute/BasicFileAttributes.html",
  "BasicFileAttributes.fileKey()":          "java.base/java/nio/file/attribute/BasicFileAttributes.html#fileKey()",

  "FileAttribute":                          "java.base/java/nio/file/attribute/FileAttribute.html",
  "DosFileAttributes":                      "java.base/java/nio/file/attribute/DosFileAttributes.html",
  "PosixFileAttributes":                    "java.base/java/nio/file/attribute/PosixFileAttributes.html",
  "PosixFilePermissions":                   "java.base/java/nio/file/attribute/PosixFilePermissions.html",
  "PosixFilePermissions.toString()":        "java.base/java/nio/file/attribute/PosixFilePermissions.html#toString(java.util.Set)",
  "PosixFilePermissions.fromString()":      "java.base/java/nio/file/attribute/PosixFilePermissions.html#fromString(java.lang.String)",
  "PosixFilePermissions.asFileAttribute()": "java.base/java/nio/file/attribute/PosixFilePermissions.html#asFileAttribute(java.util.Set)",

  "Byte":                                   "java.base/java/lang/Byte.html",
  "Byte.compareTo(Byte)":                   "java.base/java/lang/Byte.html#compareTo(java.lang.Byte)",

  "Comparator":                                         "java.base/java/util/Comparator.html",
  "Comparator.comparingDouble(ToDoubleFunction)":       "java.base/java/util/Comparator.html#comparingDouble(java.util.function.ToDoubleFunction)",
  "Comparator.comparingLong(ToLongFunction)":           "java.base/java/util/Comparator.html#comparingLong(java.util.function.ToLongFunction)",
  "Comparator.reversed()":                              "java.base/java/util/Comparator.html#reversed()",
  "Comparator.thenComparing(Function)":                 "java.base/java/util/Comparator.html#thenComparing(java.util.function.Function)",
  "Comparator.thenComparingDouble(ToDoubleFunction)":   "java.base/java/util/Comparator.html#thenComparingDouble(java.util.function.ToDoubleFunction)",
  "Comparator.thenComparingInt(ToIntFunction)":         "java.base/java/util/Comparator.html#thenComparingInt(java.util.function.ToIntFunction)",
  "Comparator.thenComparingLong(ToLongFunction)":       "java.base/java/util/Comparator.html#thenComparingLong(java.util.function.ToLongFunction)",
  "Comparator.compare(T,T)":                            "java.base/java/util/Comparator.html#compare(T,T)",
  "Comparator.comparing(Function)":                     "java.base/java/util/Comparator.html#comparing(java.util.function.Function)",
  "Comparator.comparingInt(ToIntFunction)":             "java.base/java/util/Comparator.html#comparingInt(java.util.function.ToIntFunction)",
  "Comparator.naturalOrder()":                          "java.base/java/util/Comparator.html#naturalOrder()",
  "Comparator.nullsFirst(Comparator)":                  "java.base/java/util/Comparator.html#nullsFirst(java.util.Comparator)",
  "Comparator.nullsLast(Comparator)":                   "java.base/java/util/Comparator.html#nullsLast(java.util.Comparator)",
  "Comparator.thenComparing(Comparator)":               "java.base/java/util/Comparator.html#thenComparing(java.util.Comparator)",

  "Comparable":                          "java.base/java/lang/Comparable.html",
  "Comparable.compareTo()":              "java.base/java/lang/Comparable.html#compareTo(T)",

  "Math.E":                              "java.base/java/lang/Math.html#E",
  "Math.PI":                             "java.base/java/lang/Math.html#PI",
  "Math.abs(double)":                    "java.base/java/lang/Math.html#abs(double)",
  "Math.abs(float)":                     "java.base/java/lang/Math.html#abs(float)",
  "Math.abs(int)":                       "java.base/java/lang/Math.html#abs(int)",
  "Math.abs(long)":                      "java.base/java/lang/Math.html#abs(long)",
  "Math.acos(double)":                   "java.base/java/lang/Math.html#acos(double)",
  "Math.asin(double)":                   "java.base/java/lang/Math.html#asin(double)",
  "Math.atan(double)":                   "java.base/java/lang/Math.html#atan(double)",
  "Math.atan2(double,double)":           "java.base/java/lang/Math.html#atan2(double,double)",
  "Math.ceil(double)":                   "java.base/java/lang/Math.html#ceil(double)",
  "Math.cos(double)":                    "java.base/java/lang/Math.html#cos(double)",
  "Math.exp(double)":                    "java.base/java/lang/Math.html#exp(double)",
  "Math.floor(double)":                  "java.base/java/lang/Math.html#floor(double)",
  "Math.log(double)":                    "java.base/java/lang/Math.html#log(double)",
  "Math.max(double,double)":             "java.base/java/lang/Math.html#max(double,double)",
  "Math.max(float,float)":               "java.base/java/lang/Math.html#max(float,float)",
  "Math.max(int,int)":                   "java.base/java/lang/Math.html#max(int,int)",
  "Math.max(long,long)":                 "java.base/java/lang/Math.html#max(long,long)",
  "Math.min(double,double)":             "java.base/java/lang/Math.html#min(double,double)",
  "Math.min(float,float)":               "java.base/java/lang/Math.html#min(float,float)",
  "Math.min(int,int)":                   "java.base/java/lang/Math.html#min(int,int)",
  "Math.min(long,long)":                 "java.base/java/lang/Math.html#min(long,long)",
  "Math.pow(double,double)":             "java.base/java/lang/Math.html#pow(double,double)",
  "Math.random()":                       "java.base/java/lang/Math.html#random()",
  "Math.rint(double)":                   "java.base/java/lang/Math.html#rint(double)",
  "Math.round(double)":                  "java.base/java/lang/Math.html#round(double)",
  "Math.round(float)":                   "java.base/java/lang/Math.html#round(float)",
  "Math.sin(double)":                    "java.base/java/lang/Math.html#sin(double)",
  "Math.sqrt(double)":                   "java.base/java/lang/Math.html#sqrt(double)",
  "Math.tan(double)":                    "java.base/java/lang/Math.html#tan(double)",
  "Math.toDegrees(double)":              "java.base/java/lang/Math.html#toDegrees(double)",
  "Math.toRadians(double)":              "java.base/java/lang/Math.html#toRadians(double)",
  "Math":                                "java.base/java/lang/Math.html",

  "Collections.sort(List)":              "java.base/java/util/Collections.html#sort(java.util.List)",
  "Collections.sort(List,comparator)":   "java.base/java/util/Collections.html#sort(java.util.List,java.util.Comparator)",
  "Collections.emptyList()":             "java.base/java/util/Collections.html#emptyList()",

  "File":                                "java.base/java/io/File.html",
  "File(String)":                        "java.base/java/io/File.html#%3Cinit%3E(java.lang.String)",
  "File(String,String)" :                "java.base/java/io/File.html#%3Cinit%3E(java.lang.String,java.lang.String)",
  "File(File,String)":                   "java.base/java/io/File.html#%3Cinit%3E(java.io.File,java.lang.String)",
  "File(URI)":                           "java.base/java/io/File.html#%3Cinit%3E(java.net.URI)",
  "File.equals()":                       "java.base/java/io/File.html#equals(java.lang.Object)",
  "File.toPath()":                       "java.base/java/io/File.html#toPath()",
  "File.canRead()":                      "java.base/java/io/File.html#canRead()",
  "File.canWrite()":                     "java.base/java/io/File.html#canWrite()",
  "File.canExecute()":                   "java.base/java/io/File.html#canExecute()",
  "File.isDirectory()":                  "java.base/java/io/File.html#isDirectory()",
  "File.isFile()":                       "java.base/java/io/File.html#isFile()",
  "File.length()":                       "java.base/java/io/File.html#length()",
  "File.lastModified()":                 "java.base/java/io/File.html#lastModified()",
  "File.setLastModified(long)":          "java.base/java/io/File.html#setLastModified(long)",
  "File.setExecutable()" :               "java.base/java/io/File.html#setExecutable(boolean)",
  "File.setReadable()" :                 "java.base/java/io/File.html#setReadable()",
  "File.setReadOnly()" :                 "java.base/java/io/File.html#setReadOnly()",
  "File.setWritable()" :                 "java.base/java/io/File.html#setWritable(boolean)",
  "File.renameTo()" :                    "java.base/java/io/File.html#renameTo(java.io.File)",
  "File.delete()" :                      "java.base/java/io/File.html#delete()",
  "File.createNewFile()" :               "java.base/java/io/File.html#createNewFile()",
  "File.deleteOnExit()" :                "java.base/java/io/File.html#deleteOnExit()",
  "File.createTempFile()" :              "java.base/java/io/File.html#createTempFile(java.lang.String,java.lang.String)",
  "File.exists()" :                      "java.base/java/io/File.html#exists()",
  "File.compareTo()" :                   "java.base/java/io/File.html#compareTo(java.io.File)",
  "File.getName()":                      "java.base/java/io/File.html#getName()",
  "File.getAbsolutePath()" :             "java.base/java/io/File.html#getAbsolutePath()",
  "File.getAbsoluteFile()" :             "java.base/java/io/File.html#getAbsoluteFile()",
  "File.getCanonicalPath()" :            "java.base/java/io/File.html#getCanonicalPath()",
  "File.getCanonicalFile()" :            "java.base/java/io/File.html#getCanonicalFile()",
  "File.toURI()" :                       "java.base/java/io/File.html#toURI()",
  "File.isHidden()" :                    "java.base/java/io/File.html#isHidden()",
  "File.list()" :                        "java.base/java/io/File.html#list()",
  "File.mkdir()" :                       "java.base/java/io/File.html#mkdir()",
  "File.mkdirs()" :                      "java.base/java/io/File.html#mkdirs()",
  "File.listRoots()" :                   "java.base/java/io/File.html#listRoots()",
  "File.getTotalSpace()" :               "java.base/java/io/File.html#getTotalSpace()",
  "File.getFreeSpace()" :                "java.base/java/io/File.html#getFreeSpace()",
  "File.getUsableSpace()" :              "java.base/java/io/File.html#getUsableSpace()",
  "File.getParent()" :                   "java.base/java/io/File.html#getParent()",
  "File.getPath()" :                     "java.base/java/io/File.html#getPath()",

  "Files":                               "java.base/java/nio/file/Files.html",
  "Files.isReadable()":                  "java.base/java/nio/file/Files.html#isReadable()",
  "Files.isWritable()":                  "java.base/java/nio/file/Files.html#isWritable()",
  "Files.isExecutable()":                "java.base/java/nio/file/Files.html#isExecutable()",
  "Files.isDirectory()":                 "java.base/java/nio/file/Files.html#isDirectory(java.nio.file.Path,java.nio.file.LinkOption...)",
  "Files.isRegularFile()":               "java.base/java/nio/file/Files.html#isRegularFile(java.nio.file.Path,java.nio.file.LinkOption...)",
  "Files.size()":                        "java.base/java/nio/file/Files.html#size(java.nio.file.Path)",
  "Files.getLastModifiedTime()":         "java.base/java/nio/file/Files.html#getLastModifiedTime(java.nio.file.Path,java.nio.file.LinkOption...)",
  "Files.setLastModifiedTime()":         "java.base/java/nio/file/Files.html#setLastModifiedTime(java.nio.file.Path,java.nio.file.attribute.FileTime)",
  "Files.move(Path,Path,CopyOption)":    "java.base/java/nio/file/Files.html#move(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption...)",
  "Files.delete()":                      "java.base/java/nio/file/Files.html#delete(java.nio.file.Path)",
  "Files.createFile()":                  "java.base/java/nio/file/Files.html#createFile(java.nio.file.Path,java.nio.file.attribute.FileAttribute...)",
  "Files.exists()":                      "java.base/java/nio/file/Files.html#exists(java.nio.file.Path,java.nio.file.LinkOption...)",
  "Files.notExists()":                   "java.base/java/nio/file/Files.html#notExists(java.nio.file.Path,java.nio.file.LinkOption...)",
  "Files.isHidden()":                    "java.base/java/nio/file/Files.html#isHidden(java.nio.file.Path)",
  "Files.isSameFile()":                  "java.base/java/nio/file/Files.html#isSameFile(java.nio.file.Path,java.nio.file.Path)",
  "Files.newBufferedReader()":           "java.base/java/nio/file/Files.html#newBufferedReader(java.nio.file.Path)",
  "Files.getOwner()":                    "java.base/java/nio/file/Files.html#getOwner(java.nio.file.Path,java.nio.file.LinkOption...)",
  "Files.setOwner()":                    "java.base/java/nio/file/Files.html#setOwner(java.nio.file.Path,java.nio.file.attribute.UserPrincipal)",
  "Files.getPosixFilePermissions()":     "java.base/java/nio/file/Files.html#getPosixFilePermissions(java.nio.file.Path,java.nio.file.LinkOption...)",
  "Files.setPosixFilePermissions()":     "java.base/java/nio/file/Files.html#setPosixFilePermissions(java.nio.file.Path,java.util.Set)",
  "Files.getAttributes()":               "java.base/java/nio/file/Files.html#getAttribute(java.nio.file.Path,java.lang.String,java.nio.file.LinkOption...)",
  "Files.readAttributes(String)":        "java.base/java/nio/file/Files.html#readAttributes(java.nio.file.Path,java.lang.String,java.nio.file.LinkOption...)",
  "Files.readAttributes(Path)":          "java.base/java/nio/file/Files.html#readAttributes(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption...)",
  "Files.getFileStore()":                "java.base/java/nio/file/Files.html#getFileStore(java.nio.file.Path)",
  "Files.getFileAttributeView()":        "java.base/java/nio/file/Files.html#getFileAttributeView(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption...)",
  "Files.readAllBytes()":                "java.base/java/nio/file/Files.html#readAllBytes(java.nio.file.Path)",
  "Files.readAllLines(Path)":            "java.base/java/nio/file/Files.html#readAllLines(java.nio.file.Path)",
  "Files.readAllLines(Path,Charset)":    "java.base/java/nio/file/Files.html#readAllLines(java.nio.file.Path,java.nio.charset.Charset)",
  "Files.write(byte)":                   "java.base/java/nio/file/Files.html#write(java.nio.file.Path,byte%5B%5D,java.nio.file.OpenOption...)",
  "Files.write(Iterable)":               "java.base/java/nio/file/Files.html#write(java.nio.file.Path,java.lang.Iterable,java.nio.charset.Charset,java.nio.file.OpenOption...)",
  "Files.newBufferedReader(CharSet)":    "java.base/java/nio/file/Files.html#newBufferedReader(java.nio.file.Path,java.nio.charset.Charset)",
  "Files.newBufferedWriter()":           "java.base/java/nio/file/Files.html#newBufferedWriter(java.nio.file.Path,java.nio.charset.Charset,java.nio.file.OpenOption...)",
  "Files.newBufferedWriter(OpenOptions)":"java.base/java/nio/file/Files.html#newBufferedWriter(java.nio.file.Path,java.nio.file.OpenOption...)",
  "Files.newInputStream()":              "java.base/java/nio/file/Files.html#newInputStream(java.nio.file.Path,java.nio.file.OpenOption...)",
  "Files.newOutputStream()":             "java.base/java/nio/file/Files.html#newOutputStream(java.nio.file.Path,java.nio.file.OpenOption...)",
  "Files.newByteChannel()":              "java.base/java/nio/file/Files.html#newByteChannel(java.nio.file.Path,java.nio.file.OpenOption...)",
  "Files.newByteChannel(FileAttributes)":"java.base/java/nio/file/Files.html#newByteChannel(java.nio.file.Path,java.util.Set,java.nio.file.attribute.FileAttribute...)",
  "Files.createDirectory(Path,FileAttribute)":                "java.base/java/nio/file/Files.html#createDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute...)",
  "Files.createDirectories(Path,FileAttribute)":              "java.base/java/nio/file/Files.html#createDirectories(java.nio.file.Path,java.nio.file.attribute.FileAttribute...)",
  "Files.createTempDirectory(Path,String,FileAttribute...)":  "java.base/java/nio/file/Files.html#createTempDirectory(java.nio.file.Path,java.lang.String,java.nio.file.attribute.FileAttribute...)",
  "Files.createTempDirectory(String,FileAttribute...)":       "java.base/java/nio/file/Files.html#createTempDirectory(java.lang.String,java.nio.file.attribute.FileAttribute...)",
  "Files.newDirectoryStream(Path)":                           "java.base/java/nio/file/Files.html#newDirectoryStream(java.nio.file.Path)",
  "Files.newDirectoryStream(Path,String)":                    "java.base/java/nio/file/Files.html#newDirectoryStream(java.nio.file.Path,java.lang.String)",
  "Files.newDirectoryStream(Path,DirectoryStream.Filter)":    "java.base/java/nio/file/Files.html#newDirectoryStream(java.nio.file.Path,java.nio.file.DirectoryStream.Filter)",
  "Files.createSymbolicLink(Path,Path,FileAttribute)":        "java.base/java/nio/file/Files.html#createSymbolicLink(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.FileAttribute...)",
  "Files.createLink(Path,Path)":                              "java.base/java/nio/file/Files.html#createLink(java.nio.file.Path,java.nio.file.Path)",
  "Files.isSymbolicLink(Path)":                               "java.base/java/nio/file/Files.html#isSymbolicLink(java.nio.file.Path)",
  "Files.readSymbolicLink(Path)":                             "java.base/java/nio/file/Files.html#readSymbolicLink(java.nio.file.Path)",
  "Files.probeContentType(Path)":                             "java.base/java/nio/file/Files.html#probeContentType(java.nio.file.Path)",
  "Files.lines(Path)":                                        "java.base/java/nio/file/Files.html#lines(java.nio.file.Path)",
  "Files.copy(InputStream,Path,CopyOption)":                  "java.base/java/nio/file/Files.html#copy(java.io.InputStream,java.nio.file.Path,java.nio.file.CopyOption...)",
  "Files.copy(Path,OutputStream)":                            "java.base/java/nio/file/Files.html#copy(java.nio.file.Path,java.io.OutputStream)",
  "Files.copy(Path,Path,CopyOption)":                         "java.base/java/nio/file/Files.html#copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption...)",
  "Files.setAttribute(Path,String,Object,LinkOption)":        "java.base/java/nio/file/Files.html#setAttribute(java.nio.file.Path,java.lang.String,java.lang.Object,java.nio.file.LinkOption...)",
  "Files.createTempFile(String,String,FileAttribute)":        "java.base/java/nio/file/Files.html#createTempFile(java.lang.String,java.lang.String,java.nio.file.attribute.FileAttribute...)",
  "Files.createTempFile(Path,String,String,FileAttribute)":   "java.base/java/nio/file/Files.html#createTempFile(java.nio.file.Path,java.lang.String,java.lang.String,java.nio.file.attribute.FileAttribute...)",

  "SeekableByteChannel":                                      "java.base/java/nio/channels/SeekableByteChannel.html",

  "NotLinkException":                                  "java.base/java/nio/file/NotLinkException.html",

  "FileAttributeView":                                 "java.base/java/nio/file/attribute/FileAttributeView.html",

  "FileVisitor":                                           "java.base/java/nio/file/FileVisitor.html",
  "FileVisitor.postVisitDirectory(T,IOException)":         "java.base/java/nio/file/FileVisitor.html#postVisitDirectory(T,java.io.IOException)",
  "FileVisitor.preVisitDirectory(T,BasicFileAttributes)":  "java.base/java/nio/file/FileVisitor.html#preVisitDirectory(T,java.nio.file.attribute.BasicFileAttributes)",
  "FileVisitor.visitFile(T,BasicFileAttributes)":          "java.base/java/nio/file/FileVisitor.html#visitFile(T,java.nio.file.attribute.BasicFileAttributes)",
  "FileVisitor.visitFileFailed(T,IOException)":            "java.base/java/nio/file/FileVisitor.html#visitFileFailed(T,java.io.IOException)",

  "SimpleFileVisitor":                                 "java.base/java/nio/file/SimpleFileVisitor.html",
  "FileVisitResult":                                   "java.base/java/nio/file/FileVisitResult.html",
  "FileVisitResult.CONTINUE":                          "java.base/java/nio/file/FileVisitResult.html#CONTINUE",
  "FileVisitResult.TERMINATE":                         "java.base/java/nio/file/FileVisitResult.html#TERMINATE",
  "FileVisitResult.SKIP_SUBTREE":                      "java.base/java/nio/file/FileVisitResult.html#SKIP_SUBTREE",
  "FileVisitResult.SKIP_SIBLINGS":                     "java.base/java/nio/file/FileVisitResult.html#SKIP_SIBLINGS",

  "IOError":                                           "java.base/java/io/IOError.html",
  "Files.walkFileTree(Path,FileVisitor)":              "java.base/java/nio/file/Files.html#walkFileTree(java.nio.file.Path,java.nio.file.FileVisitor)",
  "Files.walkFileTree(Path,Set,int,FileVisitor)":      "java.base/java/nio/file/Files.html#walkFileTree(java.nio.file.Path,java.util.Set,int,java.nio.file.FileVisitor)",
  "FileVisitOption":                                   "java.base/java/nio/file/FileVisitOption.html",
  "FileVisitOption.FOLLOW_LINKS":                      "java.base/java/nio/file/FileVisitOption.html#FOLLOW_LINKS",
  "FileSystemLoopException":                           "java.base/java/nio/file/FileSystemLoopException.html",

  "PathMatcher":                         "java.base/java/nio/file/PathMatcher.html",
  "PathMatcher.matches()":               "java.base/java/nio/file/PathMatcher.html#matches(java.nio.file.Path)",

  "BasicFileAttributeView":              "java.base/java/nio/file/attribute/BasicFileAttributeView.html",
  "DosFileAttributeView":                "java.base/java/nio/file/attribute/DosFileAttributeView.html",
  "PosixFileAttributeView":              "java.base/java/nio/file/attribute/PosixFileAttributeView.html",
  "FileOwnerAttributeView":              "java.base/java/nio/file/attribute/FileOwnerAttributeView.html",
  "AclFileAttributeView":                "java.base/java/nio/file/attribute/AclFileAttributeView.html",
  "UserDefinedFileAttributeView":        "java.base/java/nio/file/attribute/UserDefinedFileAttributeView.html",

  "CopyOption":                          "java.base/java/nio/file/CopyOption.html",

  "StandardCopyOption":                  "java.base/java/nio/file/StandardCopyOption.html",
  "StandardCopyOption.REPLACE_EXISTING": "java.base/java/nio/file/StandardCopyOption.html#REPLACE_EXISTING",
  "StandardCopyOption.COPY_ATTRIBUTES":  "java.base/java/nio/file/StandardCopyOption.html#COPY_ATTRIBUTES",
  "StandardCopyOption.ATOMIC_MOVE":      "java.base/java/nio/file/StandardCopyOption.html#ATOMIC_MOVE",

  "LinkOption":                          "java.base/java/nio/file/LinkOption.html",
  "LinkOption.NOFOLLOW_LINKS":           "java.base/java/nio/file/LinkOption.html#NOFOLLOW_LINKS",

  "FileSystem":                                 "java.base/java/nio/file/FileSystem.html",
  "FileSystem.getPathMatcher(String)":          "java.base/java/nio/file/FileSystem.html#getPathMatcher(java.lang.String)",
  "FileSystem.getRootDirectories()":            "java.base/java/nio/file/FileSystem.html#getRootDirectories()",
  "Filesystem.getPath(String)":                 "java.base/java/nio/file/FileSystem.html#getPath(java.lang.String,java.lang.String...)",
  "FileSystem.getUserPrincipalLookupService()": "java.base/java/nio/file/FileSystem.html#getUserPrincipalLookupService()",
  "FileSystem.newWatchService()":               "java.base/java/nio/file/FileSystem.html#newWatchService()",
  "FileSystem.getSeparator()":                  "java.base/java/nio/file/FileSystem.html#getSeparator()",
  "FileSystem.getFileStores()":                 "java.base/java/nio/file/FileSystem.html#getFileStores()",

  "FileSystems":                                "java.base/java/nio/file/FileSystems.html",
  "FileSystems.getDefault()":                   "java.base/java/nio/file/FileSystems.html#getDefault()",

  "FileStore":                           "java.base/java/nio/file/FileStore.html",
  "FileStore.getTotalSpace()":           "java.base/java/nio/file/FileStore.html#getTotalSpace()",
  "FileStore.getUnallocatedSpace()":     "java.base/java/nio/file/FileStore.html#getUnallocatedSpace()",
  "FileStore.getUsableSpace()":          "java.base/java/nio/file/FileStore.html#getUsableSpace()",

  "FileTime":                            "java.base/java/nio/file/attribute/FileTime.html",

  "Iterable":                                       "java.base/java/lang/Iterable.html",
  "Iterable.forEach()":                             "java.base/java/lang/Iterable.html#forEach(java.util.function.Consumer)",
  "Iterable.iterator()":                            "java.base/java/lang/Iterable.html#iterator()",

  "Path":                                           "java.base/java/nio/file/Path.html",
  "Path.toFile()":                                  "java.base/java/nio/file/Path.html#toFile()",
  "Path.resolve()":                                 "java.base/java/nio/file/Path.html#resolve(java.lang.String)",
  "Path.compareTo()":                               "java.base/java/nio/file/Path.html#compareTo(java.nio.file.Path)",
  "Path.equals()":                                  "java.base/java/nio/file/Path.html#equals(java.lang.Object)",
  "Path.toAbsolutePath()":                          "java.base/java/nio/file/Path.html#toAbsolutePath()",
  "Path.toRealPath()":                              "java.base/java/nio/file/Path.html#toRealPath(java.nio.file.LinkOption...)",
  "Path.normalize()":                               "java.base/java/nio/file/Path.html#normalize()",
  "Path.toUri()":                                   "java.base/java/nio/file/Path.html#toUri()",
  "Path.relativize()":                              "java.base/java/nio/file/Path.html#relativize(java.nio.file.Path)",
  "Path.of(String)":                                "java.base/java/nio/file/Path.html#of(java.lang.String,java.lang.String...)",
  "Path.toString()":                                "java.base/java/nio/file/Path.html#toString()",
  "Path.getFileName()":                             "java.base/java/nio/file/Path.html#getFileName()",
  "Path.getName(int)":                              "java.base/java/nio/file/Path.html#getName(int)",
  "Path.getNameCount()":                            "java.base/java/nio/file/Path.html#getNameCount()",
  "Path.subpath(int,int)":                          "java.base/java/nio/file/Path.html#subpath(int,int)",
  "Path.getParent()":                               "java.base/java/nio/file/Path.html#getParent()",
  "Path.getRoot()":                                 "java.base/java/nio/file/Path.html#getRoot()",
  "Path.startsWith()":                              "java.base/java/nio/file/Path.html#startsWith()",
  "Path.endsWith()":                                "java.base/java/nio/file/Path.html#endsWith()",
  "Path.register(WatchService,WatchEvent.Kind...)": "java.base/java/nio/file/Path.html#register(java.nio.file.WatchService,java.nio.file.WatchEvent.Kind...)",


  "Paths":                               "java.base/java/nio/file/Paths.html",
  "Paths.get(String)":                   "java.base/java/nio/file/Paths.html#get(java.lang.String,java.lang.String...)",
  "Paths.toString()":                    "java.base/java/nio/file/Paths.html#toString()",
  "Paths.getFileName()":                 "java.base/java/nio/file/Paths.html#getFileName()",
  "Paths.getName(int)":                  "java.base/java/nio/file/Paths.html#getName(int)",
  "Paths.getNameCount()":                "java.base/java/nio/file/Paths.html#getNameCount()",
  "Paths.subpath(int,int)":              "java.base/java/nio/file/Paths.html#subpath(int,int)",
  "Paths.getParent()":                   "java.base/java/nio/file/Paths.html#getParent()",
  "Paths.getRoot()":                     "java.base/java/nio/file/Paths.html#getRoot()",

  "CharSequence":                         "java.base/java/lang/CharSequence.html",

  "Float":                                "java.base/java/lang/Float.html",
  "Float.compareTo(Float)":               "java.base/java/lang/Float.html#compareTo(java.lang.Float)",
  "Float.parseFloat(String)":             "java.base/java/lang/Float.html#parseFloat(java.lang.String)",

  "Double":                               "java.base/java/lang/Double.html",
  "Double.compareTo(Double)":             "java.base/java/lang/Double.html#compareTo(java.lang.Double)",

  "Character":                            "java.base/java/lang/Character.html",
  "Character.isDigit(char)":              "java.base/java/lang/Character.html#isDigit(char)",
  "Character.isLetter(char)":             "java.base/java/lang/Character.html#isLetter(char)",
  "Character.isLowerCase(char)":          "java.base/java/lang/Character.html#isLowerCase(char)",
  "Character.isUpperCase(char)":          "java.base/java/lang/Character.html#isUpperCase(char)",
  "Character.isWhitespace(char)":         "java.base/java/lang/Character.html#isWhitespace(char)",
  "Character.toLowerCase(char)":          "java.base/java/lang/Character.html#toLowerCase(char)",
  "Character.toString(char)":             "java.base/java/lang/Character.html#toString(char)",
  "Character.toUpperCase(char)":          "java.base/java/lang/Character.html#toUpperCase(char)",

  "String":                                           "java.base/java/lang/String.html",
  "String.concat(String)":                            "java.base/java/lang/String.html#concat(java.lang.String)",
  "String.matches(String)":                           "java.base/java/lang/String.html#matches(java.lang.String)",
  "String.matches(String,int)":                       "java.base/java/lang/String.html#matches(java.lang.String,int)",
  "String.split(String)":                             "java.base/java/lang/String.html#split(java.lang.String)",
  "String.split(String,int)":                         "java.base/java/lang/String.html#split(java.lang.String,int)",
  "String.replace(char,char)":                        "java.base/java/lang/String.html#replace(char,char)",
  "String.replace(CharSequence,CharSequence)":        "java.base/java/lang/String.html#replace(java.lang.CharSequence,java.lang.CharSequence)",
  "String.replaceAll(String,String)":                 "java.base/java/lang/String.html#replaceAll(java.lang.String,java.lang.String)",
  "String.replaceFirst(String,String)":               "java.base/java/lang/String.html#replaceFirst(java.lang.String,java.lang.String)",
  "String.format()":                                  "java.base/java/lang/String.html#format(java.lang.String,java.lang.Object...)",
  "String.length()":                                  "java.base/java/lang/String.html#length()",
  "String.toString()":                                "java.base/java/lang/String.html#toString()",
  "String.charAt(int)":                               "java.base/java/lang/String.html#charAt(int)",
  "String.getChars(int,int,char,int)":                "java.base/java/lang/String.html#getChars(int,int,char%5B%5D,int)",
  "String.substring(int)":                            "java.base/java/lang/String.html#substring(int)",
  "String.substring(int,int)":                        "java.base/java/lang/String.html#substring(int,int)",
  "String.subSequence(int,int)":                      "java.base/java/lang/String.html#subSequence(int,int)",
  "String.trim()":                                    "java.base/java/lang/String.html#trim()",
  "String.chars()":                                    "java.base/java/lang/String.html#chars()",
  "String.toLowerCase()":                             "java.base/java/lang/String.html#toLowerCase()",
  "String.toUpperCase()":                             "java.base/java/lang/String.html#toUpperCase()",
  "String.indexOf(int)":                              "java.base/java/lang/String.html#indexOf(int)",
  "String.indexOf(int,int)":                          "java.base/java/lang/String.html#indexOf(int,int)",
  "String.indexOf(String)":                           "java.base/java/lang/String.html#indexOf(java.lang.String)",
  "String.indexOf(String,int)":                       "java.base/java/lang/String.html#indexOf(java.lang.String,int)",
  "String.lastIndexOf(int)":                          "java.base/java/lang/String.html#lastIndexOf(int)",
  "String.lastIndexOf(int,int)":                      "java.base/java/lang/String.html#lastIndexOf(int,int)",
  "String.lastIndexOf(String)":                       "java.base/java/lang/String.html#lastIndexOf(java.lang.String)",
  "String.lastIndexOf(String,int)":                   "java.base/java/lang/String.html#lastIndexOf(java.lang.String,int)",
  "String.contains(CharSequence)":                    "java.base/java/lang/String.html#contains(java.lang.CharSequence)",
  "String.startsWith(String)":                        "java.base/java/lang/String.html#startsWith(java.lang.String)",
  "String.startsWith(String,int)":                    "java.base/java/lang/String.html#startsWith(java.lang.String,int)",
  "String.endsWith(String)":                          "java.base/java/lang/String.html#endsWith(java.lang.String)",
  "String.compareTo(String)":                         "java.base/java/lang/String.html#compareTo(java.lang.String)",
  "String.compareToIgnoreCase(String)":               "java.base/java/lang/String.html#compareToIgnoreCase(java.lang.String)",
  "String.equalsIgnoreCase(String)":                  "java.base/java/lang/String.html#equalsIgnoreCase(java.lang.String)",
  "String.regionMatches(String,int,int)":             "java.base/java/lang/String.html#regionMatches(java.lang.String,int,int)",
  "String.regionMatches(int,String,int,int)":         "java.base/java/lang/String.html#regionMatches(int,java.lang.String,int,int)",
  "String.equals(Object)":                            "java.base/java/lang/String.html#equals(java.lang.Object)",
  "String.regionMatches(boolean,int,String,int,int)": "java.base/java/lang/String.html#regionMatches(boolean,int,java.lang.String,int,int)",
  "String.join(CharSequence,CharSequence)":           "java.base/java/lang/String.html#join(java.lang.CharSequence,java.lang.CharSequence)",

  "StringIndexOutOfBoundsException":            "java.base/java/lang/StringIndexOutOfBoundsException.html",

  "StringBuffer":                           "java.base/java/lang/StringBuffer.html",
  "StringBuffer.toString()":                "java.base/java/lang/StringBuffer.html#toString()",

  "StringBuilder":                          "java.base/java/lang/StringBuilder.html",
  "StringBuilder()":                        "java.base/java/lang/StringBuilder.html#%3Cinit%3E()",
  "StringBuilder(CharSequence)":            "java/lang/StringBuilder.html#%3Cinit%3E(java.lang.CharSequence)",
  "StringBuilder(String)":                  "java/lang/StringBuilder.html#%3Cinit%3E(java.lang.String)",
  "StringBuilder(int)":                     "java.base/java/lang/StringBuilder.html#%3Cinit%3E(int)",
  "StringBuilder.length()":                 "java.base/java/lang/StringBuilder.html#length()",
  "StringBuilder.capacity()":               "java.base/java/lang/StringBuilder.html#capacity()",
  "StringBuilder.setLength(int)":           "java.base/java/lang/StringBuilder.html#setLength(int)",
  "StringBuilder.ensureCapacity(int)":      "java.base/java/lang/StringBuilder.html#ensureCapacity(int)",
  "StringBuilder.append(Object)":           "java.base/java/lang/StringBuilder.html#append(java.lang.Object)",
  "StringBuilder.insert(int,Object)":       "java.base/java/lang/StringBuilder.html#insert(int,java.lang.Object)",
  "StringBuilder.replace(int,int,Object)":  "java.base/java/lang/StringBuilder.html#replace(int,int,java.lang.Object)",
  "StringBuilder.replace(int,int,String)":  "java.base/java/lang/StringBuilder.html#replace(int,int,java.lang.String)",
  "StringBuilder.delete(int,int)":          "java.base/java/lang/StringBuilder.html#delete(int,int)",
  "StringBuilder.deleteCharAt(int)":        "java.base/java/lang/StringBuilder.html#deleteCharAt(int)",
  "StringBuilder.setCharAt(int,char)":      "java.base/java/lang/StringBuilder.html#setCharAt(int,char)",
  "StringBuilder.reverse()":                "java.base/java/lang/StringBuilder.html#reverse()",
  "StringBuilder.toString()":               "java.base/java/lang/StringBuilder.html#toString()",

  "PrintStream":                           "java.base/java/io/PrintStream.html",
  "PrintStream.print(int)":                "java.base/java/io/PrintStream.html#print(int)",
  "PrintStream.print(String)":             "java.base/java/io/PrintStream.html#print(java.lang.String)",
  "PrintStream.print(Object)":             "java.base/java/io/PrintStream.html#print(java.lang.Object)",
  "PrintStream.println()":                 "java.base/java/io/PrintStream.html#println()",
  "PrintStream.println(int)":              "java.base/java/io/PrintStream.html#println(int)",
  "PrintStream.printf(String,Object...)":  "java.base/java/io/PrintStream.html#printf(java.lang.String,java.lang.Object...)",
  "PrintStream.println(String)":           "java.base/java/io/PrintStream.html#println(java.lang.String)",
  "PrintStream.println(Object)":           "java.base/java/io/PrintStream.html#println(java.lang.Object)",
  "PrintStream.format(String,Object...)":  "java.base/java/io/PrintStream.html#format(java.lang.String,java.lang.Object...)",

  "Reader":                              "java.base/java/io/Reader.html",
  "Reader.read()":                       "java.base/java/io/Reader.html#read()",

  "ZipFile":                             "java.base/java/util/zip/ZipFile.html",

  "UserPrincipal":                       "java.base/java/nio/file/attribute/UserPrincipal.html",

  "UserPrincipalLookupService":          "java.base/java/nio/file/attribute/UserPrincipalLookupService.html",

  "Serializable":                        "java.base/java/io/Serializable.html",

  "Externalizable":                      "java.base/java/io/Externalizable.html",

  "Writer":                              "java.base/java/io/Writer.html",
  "FileReader":                          "java.base/java/io/FileReader.html",
  "FilterWriter":                        "java.base/java/io/FilterWriter.html",
  "CharArrayReader":                     "java.base/java/io/CharArrayReader.html",
  "CharArrayWriter":                     "java.base/java/io/CharArrayWriter.html",
  "StringReader":                        "java.base/java/io/StringReader.html",
  "StringWriter":                        "java.base/java/io/StringWriter.html",
  "StringWriter.toString()":             "java.base/java/io/StringWriter.html#toString()",
  "StringWriter.getBuffer()":            "java.base/java/io/StringWriter.html#getBuffer()",
  "LineNumberReader":                    "java.base/java/io/LineNumberReader.html",

  "BufferedWriter":                      "java.base/java/io/BufferedWriter.html",
  "BufferedWriter.close()":              "java.base/java/io/BufferedWriter.html#close()",

  "FileNotFoundException":               "java.base/java/io/FileNotFoundException.html",
  "IOException":                         "java.base/java/io/IOException.html",

  "FileSystemException":                 "java.base/java/nio/file/FileSystemException.html",
  "FileSystemException.getFile()":       "java.base/java/nio/file/FileSystemException.html#getFile()",
  "FileSystemException.getMessage()":    "java.base/java/nio/file/FileSystemException.html#getMessage()",
  "FileSystemException.getReason()":     "java.base/java/nio/file/FileSystemException.html#getReason()",
  "FileSystemException.getOtherFile()":  "java.base/java/nio/file/FileSystemException.html#getOtherFile()",


  "StandardCharsets":                    "java.base/java/nio/charset/StandardCharsets.html",
  "StandardCharsets.UTF_8":              "java.base/java/nio/charset/StandardCharsets.html#UTF_8",

  "AutoCloseable":                       "java.base/java/lang/AutoCloseable.html",
  "AutoCloseable.close()":               "java.base/java/lang/AutoCloseable.html#close()",

  "NoSuchFileException":                 "java.base/java/nio/file/NoSuchFileException.html",
  "DirectoryNotEmptyException":          "java.base/java/nio/file/DirectoryNotEmptyException.html",
  "UnsupportedOperationException":       "java.base/java/lang/UnsupportedOperationException.html",

  "ByteArrayInputStream":                "java.base/java/io/ByteArrayInputStream.html",
  "ByteArrayOutputStream":               "java.base/java/io/ByteArrayOutputStream.html",
  "ByteArrayOutputStream.size()":        "java.base/java/io/ByteArrayOutputStream.html#size()",
  "ByteArrayOutputStream.toString()":    "java.base/java/io/ByteArrayOutputStream.html#toString()",
  "ByteArrayOutputStream.toBytes()":     "java.base/java/io/ByteArrayOutputStream.html#toBytes()",

  "BufferedReader":                      "java.base/java/io/BufferedReader.html",
  "BufferedReader.lines()":              "java.base/java/io/BufferedReader.html#lines()",
  "BufferedReader.readLine()":           "java.base/java/io/BufferedReader.html#readLine()",

  "BufferedOutputStream":                "java.base/java/io/BufferedOutputStream.html",

  "PrintWriter":                         "java.base/java/io/PrintWriter.html",
  "PrintWriter.println()":               "java.base/java/io/PrintWriter.html#println()",

  "GZIPInputStream":                     "java.base/java/io/GZIPInputStream.html",
  "GZIPOutputStream":                    "java.base/java/io/GZIPOutputStream.html",

  "DataOutputStream":                         "java.base/java/io/DataOutputStream.html",
  "DataOutputStream.writeBoolean(boolean)":   "java.base/java/io/DataOutputStream#writeBoolean(boolean)",
  "DataOutputStream.writeChar(int)":          "java.base/java/io/DataOutputStream#writeChar(int)",
  "DataOutputStream.writeShort(int)":         "java.base/java/io/DataOutputStream#writeShort(int)",
  "DataOutputStream.writeInt(int)":           "java.base/java/io/DataOutputStream#writeInt(int)",
  "DataOutputStream.writeLong(long)":         "java.base/java/io/DataOutputStream#writeLong(long)",
  "DataOutputStream.writeFloat(float)":       "java.base/java/io/DataOutputStream#writeFloat(float)",
  "DataOutputStream.writeDouble(double)":     "java.base/java/io/DataOutputStream#writeDouble(double)",
  "DataOutputStream.writeByte(int)":          "java.base/java/io/DataOutputStream#writeByte(int)",
  "DataOutputStream.writeBytes(String)":      "java.base/java/io/DataOutputStream#writeBytes(java.lang.String)",
  "DataOutputStream.writeChars(String)":      "java.base/java/io/DataOutputStream#writeChars(java.lang.String)",
  "DataOutputStream.writeUTF(String)":        "java.base/java/io/DataOutputStream#writeUTF(java.lang.String)",

  "DataInputStream":                     "java.base/java/io/DataInputStream.html",
  "DataInputStream.readBoolean()":       "java.base/java/io/DataInputStream.html#readBoolean()",
  "DataInputStream.readShort()":         "java.base/java/io/DataInputStream.html#readShort()",
  "DataInputStream.readChar()":          "java.base/java/io/DataInputStream.html#readChar()",
  "DataInputStream.readInt()":           "java.base/java/io/DataInputStream.html#readInt()",
  "DataInputStream.readLong()":          "java.base/java/io/DataInputStream.html#readLong()",
  "DataInputStream.readFloat()":         "java.base/java/io/DataInputStream.html#readFloat()",
  "DataInputStream.readDouble()":        "java.base/java/io/DataInputStream.html#readDouble()",
  "DataInputStream.readUnsignedByte()":  "java.base/java/io/DataInputStream.html#readUnsignedByte()",
  "DataInputStream.readUnsignedShort()": "java.base/java/io/DataInputStream.html#readUnsignedShort()",

  "DataInput.modified-utf-8":            "java.base/java/io/DataInput.html#modified-utf-8",

  "DataInput.EOFException":              "java.base/java/io/EOFException.html",

  "DataInputStream.readUTF()":               "java.base/java/io/DataInputStream.html#readUTF()",
  "DataInputStream.readFully(byte)":         "java.base/java/io/DataInputStream.html#readFully(byte%5B%5D)",
  "DataInputStream.readFully(byte,int,int)": "java.base/java/io/DataInputStream.html#readFully(byte%5B%5D,int,int)",

  "InputStreamReader":                   "java.base/java/io/InputStreamReader.html",
  "OutputStreamWriter":                  "java.base/java/io/OutputStreamWriter.html",

  "Closeable":                           "java.base/java/io/Closeable.html",
  "Closeable.close()":                   "java.base/java/io/Closeable.html#close()",

  "InputStream":                         "java.base/java/io/InputStream.html",
  "OutputStream":                        "java.base/java/io/OutputStream.html",
  "RandomAccessFile":                    "java.base/java/io/RandomAccessFile.html",

  "ByteChannel":                         "java.base/java/nio/channels/ByteChannel.html",
  "ByteBuffer":                          "java.base/java/nio/ByteBuffer.html",
  "FileChannel":                         "java.base/java/nio/channels/FileChannel.html",
  "OpenOption":                          "java.base/java/nio/file/OpenOption.html",
  "StandardOpenOption":                  "java.base/java/nio/file/StandardOpenOption.html",
  "StandardOpenOption.READ":             "java.base/java/nio/file/StandardOpenOption.html#READ",
  "StandardOpenOption.WRITE":            "java.base/java/nio/file/StandardOpenOption.html#WRITE",
  "StandardOpenOption.APPEND":           "java.base/java/nio/file/StandardOpenOption.html#APPEND",
  "StandardOpenOption.TRUNCATE_EXISTING":"java.base/java/nio/file/StandardOpenOption.html#TRUNCATE_EXISTING",
  "StandardOpenOption.CREATE_NEW":       "java.base/java/nio/file/StandardOpenOption.html#CREATE_NEW",
  "StandardOpenOption.CREATE":           "java.base/java/nio/file/StandardOpenOption.html#CREATE",
  "StandardOpenOption.DELETE_ON_CLOSE":  "java.base/java/nio/file/StandardOpenOption.html#DELETE_ON_CLOSE",
  "StandardOpenOption.SPARSE":           "java.base/java/nio/file/StandardOpenOption.html#SPARSE",
  "StandardOpenOption.SYNC":             "java.base/java/nio/file/StandardOpenOption.html#SYNC",
  "StandardOpenOption.DSYNC":            "java.base/java/nio/file/StandardOpenOption.html#DSYNC",

  "SeekableByteChannel.position()":        "java.base/java/nio/channels/SeekableByteChannel.html#position()",
  "SeekableByteChannel.position(long)":    "java.base/java/nio/channels/SeekableByteChannel.html#position(long)",
  "SeekableByteChannel.read(ByteBuffer)":  "java.base/java/nio/channels/SeekableByteChannel.html#read(java.nio.ByteBuffer)",
  "SeekableByteChannel.write(ByteBuffer)": "java.base/java/nio/channels/SeekableByteChannel.html#write(java.nio.ByteBuffer)",
  "SeekableByteChannel.truncate(long)":    "java.base/java/nio/channels/SeekableByteChannel.html#truncate(long)",

  "URI":                                 "java.base/java/net/URI.html",

  "LinkedList":                          "java.base/java/util/LinkedList.html",
  "ConcurrentHashMap":                   "java.base/java/util/concurrent/ConcurrentHashMap.html",
  "ConcurrentSkipListMap":               "java.base/java/util/concurrent/ConcurrentSkipListMap.html",

  "ArrayList":                           "java.base/java/util/ArrayList.html",

  "TreeMap":                             "java.base/java/util/TreeMap.html",

  "Number":                              "java.base/java/lang/Number.html",
  "Number.toString()":                   "java.base/java/lang/Number.html#toString()",

  "Short":                               "java.base/java/lang/Short.html",
  "Short.compareTo(Short)":              "java.base/java/lang/Short.html#compareTo(java.lang.Short)",

  "Integer":                             "java.base/java/lang/Integer.html",
  "Integer.MIN_VALUE":                   "java.base/java/lang/Integer.html#MIN_VALUE",
  "Integer.MAX_VALUE":                   "java.base/java/lang/Integer.html#MAX_VALUE",
  "Integer.compareUnsigned(int,int)":    "java.base/java/lang/Integer.html#compareUnsigned(int,int)",
  "Integer.byteValue()":                 "java.base/java/lang/Integer.html#byteValue()",
  "Integer.compareTo(Integer)":          "java.base/java/lang/Integer.html#compareTo(java.lang.Integer)",
  "Integer.decode(String)":              "java.base/java/lang/Integer.html#decode(java.lang.String)",
  "Integer.doubleValue()":               "java.base/java/lang/Integer.html#doubleValue()",
  "Integer.equals(Object)":              "java.base/java/lang/Integer.html#equals(java.lang.Object)",
  "Integer.floatValue()":                "java.base/java/lang/Integer.html#floatValue()",
  "Integer.intValue()":                  "java.base/java/lang/Integer.html#intValue()",
  "Integer.longValue()":                 "java.base/java/lang/Integer.html#longValue()",
  "Integer.parseInt(String)":            "java.base/java/lang/Integer.html#parseInt(java.lang.String)",
  "Integer.parseInt(String,int)":        "java.base/java/lang/Integer.html#parseInt(java.lang.String,int)",
  "Integer.shortValue()":                "java.base/java/lang/Integer.html#shortValue()",
  "Integer.toString()":                  "java.base/java/lang/Integer.html#toString()",
  "Integer.toString(int)":               "java.base/java/lang/Integer.html#toString(int)",
  "Integer.valueOf(int)":                "java.base/java/lang/Integer.html#valueOf(int)",
  "Integer.valueOf(String)":             "java.base/java/lang/Integer.html#valueOf(java.lang.String)",
  "Integer.valueOf(String,int)":         "java.base/java/lang/Integer.html#valueOf(java.lang.String,int)",

  "BigInteger":                          "java.base/java/math/BigInteger.html",
  "BigDecimal":                          "java.base/java/math/BigDecimal.html",

  "DirectoryStream.Filter":              "java.base/java/nio/file/DirectoryStream.Filter.html",
  "DirectoryStream.Filter.accept()":     "java.base/java/nio/file/DirectoryStream.Filter.html#accept(T)",

  "DirectoryStream":                     "java.base/java/nio/file/DirectoryStream.html",
  "DirectoryIteratorException":          "java.base/java/nio/file/DirectoryIteratorException.html",

  "WatchService":                        "java.base/java/nio/file/WatchService.html",
  "WatchService.close()":                "java.base/java/nio/file/WatchService.html#close()",
  "WatchService.poll()":                 "java.base/java/nio/file/WatchService.html#poll()",
  "WatchService.poll(long,TimeUnit)":    "java.base/java/nio/file/WatchService.html#poll(long,java.util.concurrent.TimeUnit)",
  "WatchService.take()":                 "java.base/java/nio/file/WatchService.html#take()",
  "WatchService.pollEvents()":           "java.base/java/nio/file/WatchService.html#pollEvents()",

  "Watchable":                           "java.base/java/nio/file/Watchable.html",

  "WatchEvent":                          "java.base/java/nio/file/WatchEvent.html",
  "WatchEvent.kind()":                   "java.base/java/nio/file/WatchEvent.html#kind()",
  "WatchEvent.context()":                "java.base/java/nio/file/WatchEvent.html#context()",

  "WatchEvent.Modifier":                 "java.base/java/nio/file/WatchEvent.Modifier.html",

  "StandardWatchEventKinds":              "java.base/java/nio/file/StandardWatchEventKinds.html",
  "StandardWatchEventKinds.ENTRY_CREATE": "java.base/java/nio/file/StandardWatchEventKinds.html#ENTRY_CREATE",
  "StandardWatchEventKinds.ENTRY_DELETE": "java.base/java/nio/file/StandardWatchEventKinds.html#ENTRY_DELETE",
  "StandardWatchEventKinds.ENTRY_MODIFY": "java.base/java/nio/file/StandardWatchEventKinds.html#ENTRY_MODIFY",
  "StandardWatchEventKinds.OVERFLOW":     "java.base/java/nio/file/StandardWatchEventKinds.html#OVERFLOW",

  "WatchKey":                             "java.base/java/nio/file/WatchKey.html",
  "WatchKey.reset()":                     "java.base/java/nio/file/WatchKey.html#reset()",
  "WatchKey.cancel()":                    "java.base/java/nio/file/WatchKey.html#cancel()",

  "TimeUnit":                             "java.base/java/util/concurrent/TimeUnit.html",

  "SuppressWarnings":                     "java.base/java/lang/SuppressWarnings.html",

  "FileTypeDetector":                     "java.base/java/nio/file/spi/FileTypeDetector.html",

  "Pattern":                              "java.base/java/util/regex/Pattern.html",
  "Pattern.CANON_EQ":                     "java.base/java/util/regex/Pattern.html#CANON_EQ",
  "Pattern.CASE_INSENSITIVE":             "java.base/java/util/regex/Pattern.html#CASE_INSENSITIVE",
  "Pattern.COMMENTS":                     "java.base/java/util/regex/Pattern.html#COMMENTS",
  "Pattern.DOTALL":                       "java.base/java/util/regex/Pattern.html#DOTALL",
  "Pattern.LITERAL":                      "java.base/java/util/regex/Pattern.html#LITERAL",
  "Pattern.MULTILINE":                    "java.base/java/util/regex/Pattern.html#MULTILINE",
  "Pattern.UNICODE_CASE":                 "java.base/java/util/regex/Pattern.html#UNICODE_CASE",
  "Pattern.UNIX_LINES":                   "java.base/java/util/regex/Pattern.html#UNIX_LINES",
  "Pattern.compile()":                    "java.base/java/util/regex/Pattern.html#compile(java.lang.String)",
  "Pattern.matcher()":                    "java.base/java/util/regex/Pattern.html#matcher(java.lang.CharSequence)",
  "Pattern.matches(CharSequence,int)":    "java.base/java/util/regex/Pattern.html#matches(java.lang.CharSequence,int)",
  "Pattern.split(CharSequence)":          "java.base/java/util/regex/Pattern.html#split(java.lang.CharSequence)",
  "Pattern.quote()":                      "java.base/java/util/regex/Pattern.html#quote(java.lang.String)",
  "Pattern.toString()":                   "java.base/java/util/regex/Pattern.html#toString()",

  "Matcher":                              "java.base/java/util/regex/Matcher.html",
  "Matcher.start()":                      "java.base/java/util/regex/Matcher.html#start()",
  "Matcher.start(int)":                   "java.base/java/util/regex/Matcher.html#start(int)",
  "Matcher.end()":                        "java.base/java/util/regex/Matcher.html#end()",
  "Matcher.end(int)":                     "java.base/java/util/regex/Matcher.html#end(int)",
  "Matcher.group(int)":                   "java.base/java/util/regex/Matcher.html#group(int)",
  "Matcher.groupCount()":                 "java.base/java/util/regex/Matcher.html#groupCount()",
  "Matcher.lookingAt()":                  "java.base/java/util/regex/Matcher.html#lookingAt()",
  "Matcher.find()":                       "java.base/java/util/regex/Matcher.html#find()",
  "Matcher.find(int)":                    "java.base/java/util/regex/Matcher.html#find(int)",
  "Matcher.matches()":                    "java.base/java/util/regex/Matcher.html#matches()",
  "Matcher.appendReplacement()":          "java.base/java/util/regex/Matcher.html#appendReplacement(java.lang.StringBuilder,java.lang.String)",
  "Matcher.appendTail()":                 "java.base/java/util/regex/Matcher.html#appendTail(java.lang.StringBuilder)",
  "Matcher.replaceAll()":                 "java.base/java/util/regex/Matcher.html#replaceAll(java.lang.String)",
  "Matcher.replaceFirst(String)":         "java.base/java/util/regex/Matcher.html#replaceFirst(java.lang.String)",
  "Matcher.quoteReplacement()":           "java.base/java/util/regex/Matcher.html#quoteReplacement(java.lang.String)",

  "PatternSyntaxException":                  "java.base/java/util/regex/PatternSyntaxException.html",
  "PatternSyntaxException.getDescription()": "java.base/java/util/regex/PatternSyntaxException.html#getDescription()",
  "PatternSyntaxException.getIndex()":       "java.base/java/util/regex/PatternSyntaxException.html#getIndex()",
  "PatternSyntaxException.getPattern()":     "java.base/java/util/regex/PatternSyntaxException.html#getPattern()",
  "PatternSyntaxException.getMessage()":     "java.base/java/util/regex/PatternSyntaxException.html#getMessage()",

  "UnicodeScript.forName()":              "java.base/java/lang/Character.UnicodeScript.html#forName(java.lang.String)",

  "Date":                                 "java.base/java/util/Date.html",
  "Calendar":                             "java.base/java/util/Calendar.html",
  "GregorianCalendar":                    "java.base/java/util/GregorianCalendar.html",

  "TemporalAdjuster":                     "java.base/java/time/temporal/TemporalAdjuster.html",
  "TemporalAdjuster.adjustInto(Temporal)": "java.base/java/time/temporal/TemporalAdjuster.html#adjustInto(java.time.temporal.Temporal)",

  "LocalTime":                            "java.base/java/time/LocalTime.html",
  "TextStyle":                            "java.base/java/time/format/TextStyle.html",

  "TemporalAdjusters":                    "java.base/java/time/temporal/TemporalAdjusters.html",
  "TemporalAdjusters.lastInMonth()":      "java.base/java/time/temporal/TemporalAdjusters.html#lastInMonth(java.time.DayOfWeek)",

  "DayOfWeek":                            "java.base/java/time/DayOfWeek.html",
  "DayOfWeek.getDisplayName()":           "java.base/java/time/DayOfWeek.html#getDisplayName(java.time.format.TextStyle,java.util.Locale)",

  "Month":                                "java.base/java/time/Month.html",
  "Month.maxLength()":                    "java.base/java/time/Month.html#maxLength()",
  "Month.getDisplayName()":               "java.base/java/time/Month.html#getDisplayName(java.time.format.TextStyle,java.util.Locale)",

  "YearMonth":                            "java.base/java/time/YearMonth.html",
  "YearMonth.lengthOfMonth()":            "java.base/java/time/YearMonth.html#lengthOfMonth()",

  "MonthDay":                             "java.base/java/time/MonthDay.html",
  "MonthDay.isValidYear()":               "java.base/java/time/MonthDay.html#isValidYear(int)",

  "Year":                                 "java.base/java/time/Year.html",
  "Year.isLeap()":                        "java.base/java/time/Year.html#isLeap()",

  "LocalDate":                                       "java.base/java/time/LocalDate.html",
  "LocalDate.getDayOfWeek()":                        "java.base/java/time/LocalDate.html#getDayOfWeek()",
  "LocalDate.from()":                                "java.base/java/time/LocalDate.html#from(java.time.temporal.TemporalAccessor)",
  "LocalDate.parse(CharSequence)":                   "java.base/java/time/LocalDate.html#parse(java.lang.CharSequence)",
  "LocalDate.parse(CharSequence,DateTimeFormatter)": "java.base/java/time/LocalDate.html#parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)",

  "LocalDateTime":                                   "java.base/java/time/LocalDateTime.html",
  "LocalDateTime.now()":                             "java.base/java/time/LocalDateTime.html#now()",
  "LocalDateTime.ofInstant()":                       "java.base/java/time/LocalDateTime.html#ofInstant(java.time.Instant,java.time.ZoneId)",

  "ZoneId":                                          "java.base/java/time/ZoneId.html",
  "ZoneOffset":                                      "java.base/java/time/ZoneOffset.html",
  "TimeZone":                                        "java.base/java/util/TimeZone.html",

  "ZonedDateTime":                                   "java.base/java/time/ZonedDateTime.html",
  "ZonedDateTime.withZoneSameInstant()":             "java.base/java/time/ZonedDateTime.html#withZoneSameInstant(java.time.ZoneId)",
  "ZonedDateTime.plusMinutes()":                     "java.base/java/time/ZonedDateTime.html#plusMinutes(long)",

  "OffsetDateTime":                                  "java.base/java/time/OffsetDateTime.html",
  "OffsetTime":                                      "java.base/java/time/OffsetTime.html",

  "ZoneRules":                                       "java.base/java/time/zone/ZoneRules.html",
  "ZoneRules.isDaylightSavings()":                   "java.base/java/time/zone/ZoneRules.html#isDaylightSavings(java.time.Instant)",

  "Formatter":                                       "java.base/java/util/Formatter.html",
  "DateTimeFormatter":                               "java.base/java/time/format/DateTimeFormatter.html",

  "NumberFormat":                                    "java.base/java/text/NumberFormat.html",

  "Instant":                                         "java.base/java/time/Instant.html",
  "Instant.EPOCH":                                   "java.base/java/time/Instant.html#EPOCH",
  "Instant.MAX":                                     "java.base/java/time/Instant.html#MAX",
  "Instant.MIN":                                     "java.base/java/time/Instant.html#MIN",
  "Instant.plus()":                                  "java.base/java/time/Instant.html#plus(java.time.temporal.TemporalAmount)",
  "Instant.minus()":                                 "java.base/java/time/Instant.html#minus(java.time.temporal.TemporalAmount)",
  "Instant.isAfter()":                               "java.base/java/time/Instant.html#isAfter(java.time.Instant)",
  "Instant.isBefore()":                              "java.base/java/time/Instant.html#isBefore(java.time.Instant)",
  "Instant.until()":                                 "java.base/java/time/Instant.html#until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)",

  "Temporal":                                        "java.base/java/time/temporal/Temporal.html",
  "TemporalAmount":                                  "java.base/java/time/temporal/TemporalAmount.html",

  "TemporalField":                                   "java.base/java/time/temporal/TemporalField.html",
  "TemporalUnit":                                    "java.base/java/time/temporal/TemporalUnit.html",

  "ChronoField":                                     "java.base/java/time/temporal/ChronoField.html",
  "ChronoField.DAYS":                                "java.base/java/time/temporal/ChronoField.html#DAYS",
  "ChronoField.MONTHS":                              "java.base/java/time/temporal/ChronoField.html#MONTHS",
  "ChronoField.YEARS":                               "java.base/java/time/temporal/ChronoField.html#YEARS",
  "ChronoField.DAY_OF_WEEK":                         "java.base/java/time/temporal/ChronoField.html#DAY_OF_WEEK",
  "ChronoField.MINUTE_OF_HOUR":                      "java.base/java/time/temporal/ChronoField.html#MINUTE_OF_HOUR",
  "ChronoField.MONTH_OF_YEAR":                       "java.base/java/time/temporal/ChronoField.html#MONTH_OF_YEAR",
  "ChronoField.CLOCK_HOUR_OF_DAY":                   "java.base/java/time/temporal/ChronoField.html#CLOCK_HOUR_OF_DAY",
  "ChronoField.NANO_OF_DAY":                         "java.base/java/time/temporal/ChronoField.html#NANO_OF_DAY",
  "ChronoField.DAY_OF_YEAR":                         "java.base/java/time/temporal/ChronoField.html#DAY_OF_YEAR",

  "IsoFields":                                       "java.base/java/time/temporal/IsoFields.html",
  "WeekFields":                                      "java.base/java/time/temporal/WeekFields.html",
  "JulianFields":                                    "java.base/java/time/temporal/JulianFields.html",

  "Duration":                                        "java.base/java/time/Duration.html",
  "Period":                                          "java.base/java/time/Period.html",
  "Period.getMonths()":                              "java.base/java/time/Period.html#getMonths()",
  "Period.getDays()":                                "java.base/java/time/Period.html#getDays()",
  "Period.getYears()":                               "java.base/java/time/Period.html#getYears()",

  "TemporalAccessor":                                "java.base/java/time/temporal/TemporalAccessor.html",
  "TemporalAccessor.isSupported(TemporalField)":     "java.base/java/time/temporal/TemporalAccessor.html#isSupported(java.time.temporal.TemporalField)",

  "TemporalQuery":                                   "java.base/java/time/temporal/TemporalQuery.html",
  "TemporalQuery.queryFrom(TemporalAccessor)":       "java.base/java/time/temporal/TemporalQuery.html#queryFrom(java.time.temporal.TemporalAccessor)",

  "TemporalQueries":                                 "java.base/java/time/temporal/TemporalQueries.html",

  "ChronoUnit":                                      "java.base/java/time/temporal/ChronoUnit.html",
  "ChronoUnit.DAYS":                                 "java.base/java/time/temporal/ChronoUnit.html#DAYS",
  "ChronoUnit.WEEKS":                                "java.base/java/time/temporal/ChronoUnit.html#WEEKS",
  "ChronoUnit.MONTHS":                               "java.base/java/time/temporal/ChronoUnit.html#MONTHS",
  "ChronoUnit.YEARS":                                "java.base/java/time/temporal/ChronoUnit.html#YEARS",
  "ChronoUnit.between()":                            "java.base/java/time/temporal/ChronoUnit.html#between(java.time.temporal.Temporal,java.time.temporal.Temporal)",

  "Clock":                                           "java.base/java/time/Clock.html",
  "Clock.offset(Clock,Duration)":                    "java.base/java/time/Clock.html#offset(java.time.Clock,java.time.Duration)",
  "Clock.systemUTC()":                               "java.base/java/time/Clock.html#systemUTC()",
  "Clock.fixed(Instant,ZoneId)":                     "java.base/java/time/Clock.html#fixed(java.time.Instant,java.time.ZoneId)",

  "JapaneseDate.from(TemporalAccessor)":             "java.base/java/time/chrono/JapaneseDate.html",

  "ChronoLocalDate":                                 "java.base/java/time/chrono/ChronoLocalDate.html",
  "Chronology":                                      "java.base/java/time/chrono/Chronology.html",
  "DateTimeFormatterBuilder":                        "java.base/java/time/format/DateTimeFormatterBuilder.html",

  "Calendar.toInstant()":                            "java.base/java/util/Calendar.html#toInstant()",
  "GregorianCalendar.toZonedDateTime()":             "java.base/java/util/GregorianCalendar.html#toZonedDateTime()",
  "GregorianCalendar.from(ZonedDateTime)":           "java.base/java/util/GregorianCalendar.html#from(java.time.ZonedDateTime)",
  "Date.from(Instant)":                              "java.base/java/util/Date.html#from(java.time.Instant)",
  "Date.toInstant()":                                "java.base/java/util/Date.html#toInstant()",
  "TimeZone.toZoneId()":                             "java.base/java/util/TimeZone.html#toZoneId()",

  "DateTimeParseException":                          "java.base/java/time/format/DateTimeParseException.html",
  "DateTimeException":                               "java.base/java/time/format/DateTimeException.html",

  "DecimalFormat":                                   "java.base/java/text/DecimalFormat.html",

  "SecureRandom":                                    "java.base/java/security/SecureRandom.html",

  "Random":                                          "java.base/java/util/Random.html",
  "Random.nextInt()":                                "java.base/java/util/Random.html#nextInt()",
  "AtomicInteger":                                   "java.base/java/util/concurrent/atomic/AtomicInteger.html",
  "AtomicLong":                                      "java.base/java/util/concurrent/atomic/AtomicLong.html",

  "Runnable":                                        "java.base/java/lang/Runnable.html",
  "Runnable.run()":                                  "java.base/java/lang/Runnable.html#run()",

  "Callable":                                        "java.base/java/util/concurrent/Callable.html",
  "Callable.call()":                                 "java.base/java/util/concurrent/Callable.html#call()",

  "SafeVarargs":                                     "java.base/java/lang/SafeVarargs.html",

  "Throwable":                                       "java.base/java/lang/Throwable.html",
  "Throwable.getCause()":                            "java.base/java/lang/Throwable.html#getCause()",
  "Throwable.getStackTrace()":                       "java.base/java/lang/Throwable.html#getStackTrace()",
  "Throwable.getSuppressed()":                       "java.base/java/lang/Throwable.html#getSuppressed()",

  "Error":                                           "java.base/java/lang/Error.html",
  "Exception":                                       "java.base/java/lang/Exception.html",

  "IllegalAccessException":                          "java.base/java/lang/IllegalAccessException.html",
  "IndexOutOfBoundsException":                       "java.base/java/lang/IndexOutOfBoundsException.html",
  "NegativeArraySizeException":                      "java.base/java/lang/NegativeArraySizeException.html",
  "EmptyStackException":                             "java.base/java/util/EmptyStackException.html",
  "RuntimeException":                                "java.base/java/lang/RuntimeException.html",

  "ArrayStoreException":                             "java.base/java/lang/ArrayStoreException.html",
  "ClassCastException":                              "java.base/java/lang/ClassCastException.html",

  "FunctionalInterface": "java.base/java/lang/FunctionalInterface.html",

  "Predicate":                                       "java.base/java/util/function/Predicate.html",
  "BiConsumer":                                      "java.base/java/util/function/BiConsumer.html",
  "BiFunction":                                      "java.base/java/util/function/BiFunction.html",
  "BiPredicate":                                     "java.base/java/util/function/BiPredicate.html",
  "BinaryOperator":                                  "java.base/java/util/function/BinaryOperator.html",
  "BooleanSupplier":                                 "java.base/java/util/function/BooleanSupplier.html",
  "BooleanSupplier.getAsBoolean()":                  "java.base/java/util/function/BooleanSupplier.html#getAsBoolean()",
  "Consumer":                                        "java.base/java/util/function/Consumer.html",
  "DoubleBinaryOperator":                            "java.base/java/util/function/DoubleBinaryOperator.html",
  "DoubleConsumer":                                  "java.base/java/util/function/DoubleConsumer.html",
  "DoubleFunction":                                  "java.base/java/util/function/DoubleFunction.html",
  "DoublePredicate":                                 "java.base/java/util/function/DoublePredicate.html",
  "DoubleSupplier":                                  "java.base/java/util/function/DoubleSupplier.html",
  "DoubleSupplier.getAsDouble()":                    "java.base/java/util/function/DoubleSupplier.html#getAsDouble()",
  "DoubleToIntFunction":                             "java.base/java/util/function/DoubleToIntFunction.html",
  "DoubleToLongFunction":                            "java.base/java/util/function/DoubleToLongFunction.html",
  "DoubleUnaryOperator":                             "java.base/java/util/function/DoubleUnaryOperator.html",
  "Function":                                        "java.base/java/util/function/Function.html",
  "Function.andThen(Function)":                      "java.base/java/util/function/Function.html#andThen(java.util.function.Function)",
  "Function.apply(T)":                               "java.base/java/util/function/Function.html#apply(T)",
  "Function.compose(Function)":                      "java.base/java/util/function/Function.html#compose(java.util.function.Function)",
  "Function.identity()":                             "java.base/java/util/function/Function.html#identity()",
  "IntBinaryOperator":                               "java.base/java/util/function/IntBinaryOperator.html",
  "IntConsumer":                                     "java.base/java/util/function/IntConsumer.html",
  "IntConsumer.accept(int)":                         "java.base/java/util/function/IntConsumer.html#accept(int)",
  "IntFunction":                                     "java.base/java/util/function/IntFunction.html",
  "IntPredicate":                                    "java.base/java/util/function/IntPredicate.html",
  "IntSupplier":                                     "java.base/java/util/function/IntSupplier.html",
  "IntSupplier.getAsInt()":                          "java.base/java/util/function/IntSupplier.html#getAsInt()",
  "IntToDoubleFunction":                             "java.base/java/util/function/IntToDoubleFunction.html",
  "IntToLongFunction":                               "java.base/java/util/function/IntToLongFunction.html",
  "IntUnaryOperator":                                "java.base/java/util/function/IntUnaryOperator.html",
  "LongBinaryOperator":                              "java.base/java/util/function/LongBinaryOperator.html",
  "LongConsumer":                                    "java.base/java/util/function/LongConsumer.html",
  "LongFunction":                                    "java.base/java/util/function/LongFunction.html",
  "LongPredicate":                                   "java.base/java/util/function/LongPredicate.html",
  "LongSupplier":                                    "java.base/java/util/function/LongSupplier.html",
  "LongSupplier.getAsLong()":                        "java.base/java/util/function/LongSupplier.html#getAsLong()",
  "LongToDoubleFunction":                            "java.base/java/util/function/LongToDoubleFunction.html",
  "LongToIntFunction":                               "java.base/java/util/function/LongToIntFunction.html",
  "LongUnaryOperator":                               "java.base/java/util/function/LongUnaryOperator.html",
  "ObjDoubleConsumer":                               "java.base/java/util/function/ObjDoubleConsumer.html",
  "ObjIntConsumer":                                  "java.base/java/util/function/ObjIntConsumer.html",
  "ObjLongConsumer":                                 "java.base/java/util/function/ObjLongConsumer.html",
  "Predicate.and(Predicate)":                        "java.base/java/util/function/Predicate.html#and(java.util.function.Predicate)",
  "Predicate.negate()":                              "java.base/java/util/function/Predicate.html#negate()",
  "Predicate.or(Predicate)":                         "java.base/java/util/function/Predicate.html#or(java.util.function.Predicate)",
  "Predicate.test(T)":                               "java.base/java/util/function/Predicate.html#test(T)",
  "Supplier":                                        "java.base/java/util/function/Supplier.html",
  "Supplier.get()":                                  "java.base/java/util/function/Supplier.html#get()",
  "ToDoubleBiFunction":                              "java.base/java/util/function/ToDoubleBiFunction.html",
  "ToDoubleFunction":                                "java.base/java/util/function/ToDoubleFunction.html",
  "ToDoubleFunction.applyAsDouble(T)":               "java.base/java/util/function/ToDoubleFunction.html#applyAsDouble(T)",
  "ToIntBiFunction":                                 "java.base/java/util/function/ToIntBiFunction.html",
  "ToIntFunction":                                   "java.base/java/util/function/ToIntFunction.html",
  "ToIntFunction.applyAsInt(T)":                     "java.base/java/util/function/ToIntFunction.html#applyAsInt(T)",
  "ToLongBiFunction":                                "java.base/java/util/function/ToLongBiFunction.html",
  "ToLongFunction":                                  "java.base/java/util/function/ToLongFunction.html",
  "ToLongFunction.applyAsLong(T)":                   "java.base/java/util/function/ToLongFunction.html#applyAsLong(T)",
  "UnaryOperator":                                   "java.base/java/util/function/UnaryOperator.html",

  "Statement":                                       "java.sql/java/sql/Statement.html",

  "Socket":                                          "java.base/java/net/Socket.html",

  "Deprecated":                                    "java.base/java/lang/Deprecated.html",
  "Deprecated.forRemoval()":                       "java.base/java/lang/Deprecated.html#forRemoval()",
  "Documented":                                    "java.base/java/lang/annotation/Documented.html",
  "ElementType.ANNOTATION_TYPE":                   "java.base/java/lang/annotation/ElementType.html#ANNOTATION_TYPE",
  "ElementType.CONSTRUCTOR":                       "java.base/java/lang/annotation/ElementType.html#CONSTRUCTOR",
  "ElementType.FIELD":                             "java.base/java/lang/annotation/ElementType.html#FIELD",
  "ElementType.LOCAL_VARIABLE":                    "java.base/java/lang/annotation/ElementType.html#LOCAL_VARIABLE",
  "ElementType.METHOD":                            "java.base/java/lang/annotation/ElementType.html#METHOD",
  "ElementType.MODULE":                            "java.base/java/lang/annotation/ElementType.html#MODULE",
  "ElementType.PACKAGE":                           "java.base/java/lang/annotation/ElementType.html#PACKAGE",
  "ElementType.PARAMETER":                         "java.base/java/lang/annotation/ElementType.html#PARAMETER",
  "ElementType.RECORD_COMPONENT":                  "java.base/java/lang/annotation/ElementType.html#RECORD_COMPONENT",
  "ElementType.TYPE":                              "java.base/java/lang/annotation/ElementType.html#TYPE",
  "ElementType.TYPE_PARAMETER":                    "java.base/java/lang/annotation/ElementType.html#TYPE_PARAMETER",
  "ElementType.TYPE_USE":                          "java.base/java/lang/annotation/ElementType.html#TYPE_USE",
  "Inherited":                                     "java.base/java/lang/annotation/Inherited.html",
  "Repeatable":                                    "java.base/java/lang/annotation/Repeatable.html",
  "Retention":                                     "java.base/java/lang/annotation/Retention.html",
  "RetentionPolicy.CLASS":                         "java.base/java/lang/annotation/RetentionPolicy.html#CLASS",
  "RetentionPolicy.RUNTIME":                       "java.base/java/lang/annotation/RetentionPolicy.html#RUNTIME",
  "RetentionPolicy.SOURCE":                        "java.base/java/lang/annotation/RetentionPolicy.html#SOURCE",
  "Target":                                        "java.base/java/lang/annotation/Target.html",
  "AnnotatedElement":                              "java.base/java/lang/reflect/AnnotatedElement.html",
  "AnnotatedElement.getAnnotation(Class)":         "java.base/java/lang/reflect/AnnotatedElement.html#getAnnotation(java.lang.Class)",
  "AnnotatedElement.getAnnotationsByType(Class)":  "java.base/java/lang/reflect/AnnotatedElement.html#getAnnotationsByType(java.lang.Class)",

  "IllegalArgumentException":                      "java.base/java/lang/IllegalArgumentException.html",
  "IllegalStateException":                         "java.base/java/lang/IllegalStateException.html",
  "NoSuchMethodException":                         "java.base/java/lang/NoSuchMethodException.html",
  "ConcurrentModificationException":               "java.base/java/util/ConcurrentModificationException.html",
  "NoSuchElementException":                        "java.base/java/util/NoSuchElementException.html",

  "ArrayDeque":                                    "java.base/java/util/ArrayDeque.html",

  "Collection":                                    "java.base/java/util/Collection.html",
  "Collection.removeIf(Predicate)":                "java.base/java/util/Collection.html#removeIf(java.util.function.Predicate)",
  "Collection.add(E)":                             "java.base/java/util/Collection.html#add(E)",
  "Collection.addAll(Collection)":                 "java.base/java/util/Collection.html#addAll(java.util.Collection)",
  "Collection.clear()":                            "java.base/java/util/Collection.html#clear()",
  "Collection.contains(Object)":                   "java.base/java/util/Collection.html#contains(java.lang.Object)",
  "Collection.containsAll(Collection)":            "java.base/java/util/Collection.html#containsAll(java.util.Collection)",
  "Collection.isEmpty()":                          "java.base/java/util/Collection.html#isEmpty()",
  "Collection.iterator()":                         "java.base/java/util/Collection.html#iterator()",
  "Collection.removeAll(Collection)":              "java.base/java/util/Collection.html#removeAll(java.util.Collection)",
  "Collection.retainAll(Collection)":              "java.base/java/util/Collection.html#retainAll(java.util.Collection)",
  "Collection.size()":                             "java.base/java/util/Collection.html#size()",
  "Collection.toArray()":                          "java.base/java/util/Collection.html#toArray()",
  "Collection.toArray(tab)":                       "java.base/java/util/Collection.html#toArray(T%5B%5D)",
  "Collection.toArray(IntFunction)":               "java.base/java/util/Collection.html#toArray(java.util.function.IntFunction)",
  "Collection.stream()":                           "java.base/java/util/Collection.html#stream()",

  "Collections":                                   "java.base/java/util/Collections.html",
  "Collections.indexOfSubList(List,List)":         "java.base/java/util/Collections.html#indexOfSubList(java.util.List,java.util.List)",
  "Collections.lastIndexOfSubList(List,List)":     "java.base/java/util/Collections.html#lastIndexOfSubList(java.util.List,java.util.List)",
  "Collections.max(Collection)":                   "java.base/java/util/Collections.html#max(java.util.Collection)",
  "Collections.min(Collection)":                   "java.base/java/util/Collections.html#min(java.util.Collection)",
  "Collections.reverse(List)":                     "java.base/java/util/Collections.html#reverse(java.util.List)",
  "Collections.rotate(List,int)":                  "java.base/java/util/Collections.html#rotate(java.util.List,int)",
  "Collections.shuffle(List)":                     "java.base/java/util/Collections.html#shuffle(java.util.List)",
  "Collections.swap(List,int,int)":                "java.base/java/util/Collections.html#swap(java.util.List,int,int)",

  "Deque":                                         "java.base/java/util/Deque.html",
  "Deque.addFirst(E)":                             "java.base/java/util/Deque.html#addFirst(E)",
  "Deque.addLast(E)":                              "java.base/java/util/Deque.html#addLast(E)",
  "Deque.element()":                               "java.base/java/util/Deque.html#element()",
  "Deque.getFirst()":                              "java.base/java/util/Deque.html#getFirst()",
  "Deque.getLast()":                               "java.base/java/util/Deque.html#getLast()",
  "Deque.offerFirst(E)":                           "java.base/java/util/Deque.html#offerFirst(E)",
  "Deque.offerLast(E)":                            "java.base/java/util/Deque.html#offerLast(E)",
  "Deque.peek()":                                  "java.base/java/util/Deque.html#peek()",
  "Deque.peekFirst()":                             "java.base/java/util/Deque.html#peekFirst()",
  "Deque.poll()":                                  "java.base/java/util/Deque.html#poll()",
  "Deque.pollFirst()":                             "java.base/java/util/Deque.html#pollFirst()",
  "Deque.pop()":                                   "java.base/java/util/Deque.html#pop()",
  "Deque.push(E)":                                 "java.base/java/util/Deque.html#push(E)",
  "Deque.removeFirst()":                           "java.base/java/util/Deque.html#removeFirst()",

  "Enumeration":                                   "java.base/java/util/Enumeration.html",

  "HashSet":                                       "java.base/java/util/HashSet.html",
  "HashSet.add()":                                 "java.base/java/util/HashSet.html#add(E)",

  "Hashtable":                                     "java.base/java/util/Hashtable.html",

  "IdentityHashMap":                               "java.base/java/util/IdentityHashMap.html",

  "Iterator":                                      "java.base/java/util/Iterator.html",
  "Iterator.hasNext()":                            "java.base/java/util/Iterator.html#hasNext()",
  "Iterator.next()":                               "java.base/java/util/Iterator.html#next()",
  "Iterator.remove()":                             "java.base/java/util/Iterator.html#remove()",

  "LinkedHashMap":                                 "java.base/java/util/LinkedHashMap.html",

  "List":                                          "java.base/java/util/List.html",
  "List.of()":                                     "java.base/java/util/List.html#of(E...)",
  "List.copyOf(Collection)":                       "java.base/java/util/List.html#copyOf(java.util.Collection)",
  "List.clear()":                                  "java.base/java/util/List.html#clear()",
  "List.remove(Object)":                           "java.base/java/util/List.html#remove(java.lang.Object)",
  "List.set(int,E)":                               "java.base/java/util/List.html#set(int,E)",
  "List.get(int)":                                 "java.base/java/util/List.html#get(int)",
  "List.size()":                                   "java.base/java/util/List.html#size()",
  "List.replaceAll(UnaryOperator)":                "java.base/java/util/List.html#replaceAll(java.util.function.UnaryOperator)",
  "List.sort(Comparator)":                         "java.base/java/util/List.html#sort(java.util.Comparator)",
  "List.add(int,E)":                               "java.base/java/util/List.html#add(int,E)",
  "List.addAll(int,Collection)":                   "java.base/java/util/List.html#addAll(int,java.util.Collection)",
  "List.indexOf(Object)":                          "java.base/java/util/List.html#indexOf(java.lang.Object)",
  "List.lastIndexOf(Object)":                      "java.base/java/util/List.html#lastIndexOf(java.lang.Object)",
  "List.listIterator()":                           "java.base/java/util/List.html#listIterator()",
  "List.remove(int)":                              "java.base/java/util/List.html#remove(int)",
  "List.subList(int,int)":                         "java.base/java/util/List.html#subList(int,int)",

  "ListIterator":                                  "java.base/java/util/ListIterator.html",
  "ListIterator.hasPrevious()":                    "java.base/java/util/ListIterator.html#hasPrevious()",
  "ListIterator.next()":                           "java.base/java/util/ListIterator.html#next()",
  "ListIterator.nextIndex()":                      "java.base/java/util/ListIterator.html#nextIndex()",
  "ListIterator.previous()":                       "java.base/java/util/ListIterator.html#previous()",
  "ListIterator.previousIndex()":                  "java.base/java/util/ListIterator.html#previousIndex()",
  "ListIterator.set(E)":                           "java.base/java/util/ListIterator.html#set(E)",

  "Map.Entry":                                     "java.base/java/util/Map.Entry.html",
  "Map.Entry.getKey()":                            "java.base/java/util/Map.Entry.html#getKey()",
  "Map.Entry.getValue()":                          "java.base/java/util/Map.Entry.html#getValue()",
  "Map.Entry.setValue(V)":                         "java.base/java/util/Map.Entry.html#setValue(V)",

  "Map":                                           "java.base/java/util/Map.html",
  "Map.forEach(BiConsumer)":                       "java.base/java/util/Map.html#forEach(java.util.function.BiConsumer)",
  "Map.merge(K,V,BiFunction)":                     "java.base/java/util/Map.html#merge(K,V,java.util.function.BiFunction)",

  "Map.clear()":                                   "java.base/java/util/Map.html#clear()",
  "Map.compute(K,BiFunction)":                     "java.base/java/util/Map.html#compute(K,java.util.function.BiFunction)",
  "Map.computeIfAbsent(K,Function)":               "java.base/java/util/Map.html#computeIfAbsent(K,java.util.function.Function)",
  "Map.computeIfPresent(K,BiFunction)":            "java.base/java/util/Map.html#computeIfPresent(K,java.util.function.BiFunction)",
  "Map.containsKey(Object)":                       "java.base/java/util/Map.html#containsKey(java.lang.Object)",
  "Map.containsValue(Object)":                     "java.base/java/util/Map.html#containsValue(java.lang.Object)",
  "Map.entrySet()":                                "java.base/java/util/Map.html#entrySet()",
  "Map.get(Object)":                               "java.base/java/util/Map.html#get(java.lang.Object)",
  "Map.getOrDefault(Object,V)":                    "java.base/java/util/Map.html#getOrDefault(java.lang.Object,V)",
  "Map.isEmpty()":                                 "java.base/java/util/Map.html#isEmpty()",
  "Map.keySet()":                                  "java.base/java/util/Map.html#keySet()",
  "Map.put(K,V)":                                  "java.base/java/util/Map.html#put(K,V)",
  "Map.putAll(Map)":                               "java.base/java/util/Map.html#putAll(java.util.Map)",
  "Map.putIfAbsent(K,V)":                          "java.base/java/util/Map.html#putIfAbsent(K,V)",
  "Map.remove(Object)":                            "java.base/java/util/Map.html#remove(java.lang.Object)",
  "Map.remove(Object,Object)":                     "java.base/java/util/Map.html#remove(java.lang.Object,java.lang.Object)",
  "Map.replace(K,V)":                              "java.base/java/util/Map.html#replace(K,V)",
  "Map.replace(K,V,V)":                            "java.base/java/util/Map.html#replace(K,V,V)",
  "Map.replaceAll(BiFunction)":                    "java.base/java/util/Map.html#replaceAll(java.util.function.BiFunction)",
  "Map.size()":                                    "java.base/java/util/Map.html#size()",
  "Map.values()":                                  "java.base/java/util/Map.html#values()",

  "NavigableMap":                                  "java.base/java/util/NavigableMap.html",
  "NavigableMap.ceilingEntry(K)":                  "java.base/java/util/NavigableMap.html#ceilingEntry(K)",
  "NavigableMap.ceilingKey(K)":                    "java.base/java/util/NavigableMap.html#ceilingKey(K)",
  "NavigableMap.descendingKeySet()":               "java.base/java/util/NavigableMap.html#descendingKeySet()",
  "NavigableMap.descendingMap()":                  "java.base/java/util/NavigableMap.html#descendingMap()",
  "NavigableMap.firstEntry()":                     "java.base/java/util/NavigableMap.html#firstEntry()",
  "NavigableMap.firstKey()":                       "java.base/java/util/NavigableMap.html#firstKey()",
  "NavigableMap.floorEntry(K)":                    "java.base/java/util/NavigableMap.html#floorEntry(K)",
  "NavigableMap.floorKey(K)":                      "java.base/java/util/NavigableMap.html#floorKey(K)",
  "NavigableMap.headMap(K)":                       "java.base/java/util/NavigableMap.html#headMap(K)",
  "NavigableMap.higherEntry(K)":                   "java.base/java/util/NavigableMap.html#higherEntry(K)",
  "NavigableMap.higherKey(K)":                     "java.base/java/util/NavigableMap.html#higherKey(K)",
  "NavigableMap.lastEntry()":                      "java.base/java/util/NavigableMap.html#lastEntry()",
  "NavigableMap.lowerEntry(K)":                    "java.base/java/util/NavigableMap.html#lowerEntry(K)",
  "NavigableMap.lowerKey(K)":                      "java.base/java/util/NavigableMap.html#lowerKey(K)",
  "NavigableMap.navigableKeySet()":                "java.base/java/util/NavigableMap.html#navigableKeySet()",
  "NavigableMap.pollFirstEntry()":                 "java.base/java/util/NavigableMap.html#pollFirstEntry()",
  "NavigableMap.pollLastEntry()":                  "java.base/java/util/NavigableMap.html#pollLastEntry()",
  "NavigableMap.subMap(K,boolean,K,boolean)":      "java.base/java/util/NavigableMap.html#subMap(K,boolean,K,boolean)",
  "NavigableMap.tailMap(K)":                       "java.base/java/util/NavigableMap.html#tailMap(K)",

  "NavigableSet":                                  "java.base/java/util/NavigableSet.html",
  "NavigableSet.ceiling(E)":                       "java.base/java/util/NavigableSet.html#ceiling(E)",
  "NavigableSet.descendingIterator()":             "java.base/java/util/NavigableSet.html#descendingIterator()",
  "NavigableSet.descendingSet()":                  "java.base/java/util/NavigableSet.html#descendingSet()",
  "NavigableSet.floor(E)":                         "java.base/java/util/NavigableSet.html#floor(E)",
  "NavigableSet.headSet(E)":                       "java.base/java/util/NavigableSet.html#headSet(E)",
  "NavigableSet.higher(E)":                        "java.base/java/util/NavigableSet.html#higher(E)",
  "NavigableSet.lower(E)":                         "java.base/java/util/NavigableSet.html#lower(E)",
  "NavigableSet.pollFirst()":                      "java.base/java/util/NavigableSet.html#pollFirst()",
  "NavigableSet.pollLast()":                       "java.base/java/util/NavigableSet.html#pollLast()",
  "NavigableSet.subSet(E)":                        "java.base/java/util/NavigableSet.html#subSet(E)",
  "NavigableSet.tailSet(E)":                       "java.base/java/util/NavigableSet.html#tailSet(E)",


  "PriorityQueue":                                 "java.base/java/util/PriorityQueue.html",

  "Queue":                                         "java.base/java/util/Queue.html",
  "Queue.add(E)":                                  "java.base/java/util/Queue.html#add(E)",
  "Queue.element()":                               "java.base/java/util/Queue.html#element()",
  "Queue.offer(E)":                                "java.base/java/util/Queue.html#offer(E)",
  "Queue.peek()":                                  "java.base/java/util/Queue.html#peek()",
  "Queue.poll()":                                  "java.base/java/util/Queue.html#poll()",
  "Queue.remove()":                                "java.base/java/util/Queue.html#remove()",

  "Set":                                           "java.base/java/util/Set.html",
  "Set.copyOf(Collection)":                        "java.base/java/util/Set.html#copyOf(java.util.Collection)",
  "Set.of()":                                      "java.base/java/util/Set.html#of(E...)",

  "SortedMap":                                     "java.base/java/util/SortedMap.html",
  "SortedMap.firstKey()":                          "java.base/java/util/SortedMap.html#firstKey()",
  "SortedMap.headMap(K)":                          "java.base/java/util/SortedMap.html#headMap(K)",
  "SortedMap.lastKey()":                           "java.base/java/util/SortedMap.html#lastKey()",
  "SortedMap.subMap(K,K)":                         "java.base/java/util/SortedMap.html#subMap(K,K)",
  "SortedMap.tailMap(K)":                          "java.base/java/util/SortedMap.html#tailMap(K)",

  "SortedSet":                                     "java.base/java/util/SortedSet.html",
  "SortedSet.headSet(E)":                          "java.base/java/util/SortedSet.html#headSet(E)",
  "SortedSet.tailSet(E)":                          "java.base/java/util/SortedSet.html#tailSet(E)",

  "Stack":                                         "java.base/java/util/Stack.html",
  "Stack.peek()":                                  "java.base/java/util/Stack.html#peek()",
  "Stack.pop()":                                   "java.base/java/util/Stack.html#pop()",
  "Stack.push(E)":                                 "java.base/java/util/Stack.html#push(E)",

  "TreeSet":                                       "java.base/java/util/TreeSet.html",
  "TreeSet.first()":                               "java.base/java/util/TreeSet.html#first()",
  "TreeSet.headSet(E)":                            "java.base/java/util/TreeSet.html#headSet(E)",
  "TreeSet.last()":                                "java.base/java/util/TreeSet.html#last()",
  "TreeSet.subSet(E,E)":                           "java.base/java/util/TreeSet.html#subSet(E,E)",
  "TreeSet.tailSet(E)":                            "java.base/java/util/TreeSet.html#tailSet(E)",

  "Vector":                                        "java.base/java/util/Vector.html",

  "BlockingDeque":                                 "java.base/java/util/concurrent/BlockingDeque.html",

  "BlockingQueue":                                 "java.base/java/util/concurrent/BlockingQueue.html",

  "TransferQueue":                                 "java.base/java/util/concurrent/TransferQueue.html",

  "ArrayIndexOutOfBoundsException":                "java.base/java/lang/ArrayIndexOutOfBoundsException.html",
  "NumberFormatException":                         "java.base/java/lang/NumberFormatException.html",
  "OutOfMemoryError":                              "java.base/java/lang/OutOfMemoryError.html",

  "Character.toString(int)":                       "java.base/java/lang/Character.html#toString(int)",

  "Charset":                                       "java.base/java/nio/charset/Charset.html",

  "Optional":                                      "java.base/java/util/Optional.html",
  "Optional.empty()":                              "java.base/java/util/Optional.html#empty()",
  "Optional.filter(Predicate)":                    "java.base/java/util/Optional.html#filter(java.util.function.Predicate)",
  "Optional.flatMap(Function)":                    "java.base/java/util/Optional.html#flatMap(java.util.function.Function)",
  "Optional.get()":                                "java.base/java/util/Optional.html#get()",
  "Optional.ifPresent(Consumer)":                  "java.base/java/util/Optional.html#ifPresent(java.util.function.Consumer)",
  "Optional.ifPresentOrElse(Consumer,Runnable)":   "java.base/java/util/Optional.html#ifPresentOrElse(java.util.function.Consumer,java.lang.Runnable)",
  "Optional.isEmpty()":                            "java.base/java/util/Optional.html#isEmpty()",
  "Optional.map(Function)":                        "java.base/java/util/Optional.html#map(java.util.function.Function)",
  "Optional.of(T)":                                "java.base/java/util/Optional.html#of(T)",
  "Optional.ofNullable(T)":                        "java.base/java/util/Optional.html#ofNullable(T)",
  "Optional.or(Supplier)":                         "java.base/java/util/Optional.html#or(java.util.function.Supplier)",
  "Optional.orElse(T)":                            "java.base/java/util/Optional.html#orElse(T)",
  "Optional.orElseGet(Supplier)":                  "java.base/java/util/Optional.html#orElseGet(java.util.function.Supplier)",
  "Optional.orElseThrow()":                        "java.base/java/util/Optional.html#orElseThrow()",
  "Optional.orElseThrow(Supplier)":                "java.base/java/util/Optional.html#orElseThrow(java.util.function.Supplier)",
  "Optional.stream()":                             "java.base/java/util/Optional.html#stream()",

  "OptionalDouble":                                "java.base/java/util/OptionalDouble.html",
  "OptionalInt":                                   "java.base/java/util/OptionalInt.html",
  "OptionalLong":                                  "java.base/java/util/OptionalLong.html",

  "Random.doubles()":                              "java.base/java/util/Random.html#doubles()",
  "Random.ints()":                                 "java.base/java/util/Random.html#ints()",
  "Random.longs()":                                "java.base/java/util/Random.html#longs()",

  "Spliterator":                                   "java.base/java/util/Spliterator.html",
  "Spliterator.CONCURRENT":                        "java.base/java/util/Spliterator.html#CONCURRENT",
  "Spliterator.DISTINCT":                          "java.base/java/util/Spliterator.html#DISTINCT",
  "Spliterator.IMMUTABLE":                         "java.base/java/util/Spliterator.html#IMMUTABLE",
  "Spliterator.NONNULL":                           "java.base/java/util/Spliterator.html#NONNULL",
  "Spliterator.ORDERED":                           "java.base/java/util/Spliterator.html#ORDERED",
  "Spliterator.SIZED":                             "java.base/java/util/Spliterator.html#SIZED",
  "Spliterator.SORTED":                            "java.base/java/util/Spliterator.html#SORTED",
  "Spliterator.SUBSIZED":                          "java.base/java/util/Spliterator.html#SUBSIZED",

  "StringJoiner":                                  "java.base/java/util/StringJoiner.html",

  "ArrayBlockingQueue":                            "java.base/java/util/concurrent/ArrayBlockingQueue.html",

  "ConcurrentHashMap.newKeySet()":                 "java.base/java/util/concurrent/ConcurrentHashMap.html#newKeySet()",

  "ConcurrentSkipListSet":                         "java.base/java/util/concurrent/ConcurrentSkipListSet.html",

  "Pattern.splitAsStream(CharSequence)":           "java.base/java/util/regex/Pattern.html#splitAsStream(java.lang.CharSequence)",

  "BaseStream.parallel()":                         "java.base/java/util/stream/BaseStream.html#parallel()",
  "BaseStream.unordered()":                        "java.base/java/util/stream/BaseStream.html#unordered()",

  "Collector":                                     "java.base/java/util/stream/Collector.html",
  "Collector.Characteristics":                     "java.base/java/util/stream/Collector.Characteristics.html",
  "Collector.Characteristics.CONCURRENT":          "java.base/java/util/stream/Collector.Characteristics.html#CONCURRENT",
  "Collector.Characteristics.IDENTITY_FINISH":     "java.base/java/util/stream/Collector.Characteristics.html#IDENTITY_FINISH",
  "Collector.Characteristics.UNORDERED":           "java.base/java/util/stream/Collector.Characteristics.html#UNORDERED",
  "Collector.characteristics()":                   "java.base/java/util/stream/Collector.html#characteristics()",
  "Collector.supplier()":                          "java.base/java/util/stream/Collector.html#supplier()",

  "Collectors":                                        "java.base/java/util/stream/Collectors.html",
  "Collectors.averagingDouble(ToDoubleFunction)":      "java.base/java/util/stream/Collectors.html#averagingDouble(java.util.function.ToDoubleFunction)",
  "Collectors.averagingInt(ToIntFunction)":            "java.base/java/util/stream/Collectors.html#averagingInt(java.util.function.ToIntFunction)",
  "Collectors.averagingLong(ToLongFunction)":          "java.base/java/util/stream/Collectors.html#averagingLong(java.util.function.ToLongFunction)",
  "Collectors.collectingAndThen(Collector,Function)":  "java.base/java/util/stream/Collectors.html#collectingAndThen(java.util.stream.Collector,java.util.function.Function)",
  "Collectors.counting()":                             "java.base/java/util/stream/Collectors.html#counting()",
  "Collectors.filtering(Predicate,Collector)":         "java.base/java/util/stream/Collectors.html#filtering(java.util.function.Predicate,java.util.stream.Collector)",
  "Collectors.flatMapping(Function,Collector)":        "java.base/java/util/stream/Collectors.html#flatMapping(java.util.function.Function,java.util.stream.Collector)",
  "Collectors.groupingBy(Function)":                   "java.base/java/util/stream/Collectors.html#groupingBy(java.util.function.Function)",
  "Collectors.joining()":                              "java.base/java/util/stream/Collectors.html#joining()",
  "Collectors.joining(CharSequence)":                  "java.base/java/util/stream/Collectors.html#joining(java.lang.CharSequence)",
  "Collectors.mapping(Function,Collector)":            "java.base/java/util/stream/Collectors.html#mapping(java.util.function.Function,java.util.stream.Collector)",
  "Collectors.maxBy(java.util.Comparator)":            "java.base/java/util/stream/Collectors.html#maxBy(java.util.Comparator)",
  "Collectors.minBy(java.util.Comparator)":            "java.base/java/util/stream/Collectors.html#minBy(java.util.Comparator)",
  "Collectors.partitioningBy(Predicate)":              "java.base/java/util/stream/Collectors.html#partitioningBy(java.util.function.Predicate)",
  "Collectors.summingDouble(ToDoubleFunction)":        "java.base/java/util/stream/Collectors.html#summingDouble(java.util.function.ToDoubleFunction)",
  "Collectors.summingInt(ToIntFunction)":              "java.base/java/util/stream/Collectors.html#summingInt(java.util.function.ToIntFunction)",
  "Collectors.summingLong(ToLongFunction)":            "java.base/java/util/stream/Collectors.html#summingLong(java.util.function.ToLongFunction)",
  "Collectors.teeing(Collector,Collector,BiFunction)": "java.base/java/util/stream/Collectors.html#teeing(java.util.stream.Collector,java.util.stream.Collector,java.util.function.BiFunction)",
  "Collectors.toCollection(Supplier)":                 "java.base/java/util/stream/Collectors.html#toCollection(java.util.function.Supplier)",
  "Collectors.toConcurrentMap(Function,Function)":     "java.base/java/util/stream/Collectors.html#toConcurrentMap(java.util.function.Function,java.util.function.Function)",
  "Collectors.toList()":                               "java.base/java/util/stream/Collectors.html#toList()",
  "Collectors.toMap(Function,Function)":               "java.base/java/util/stream/Collectors.html#toMap(java.util.function.Function,java.util.function.Function)",
  "Collectors.toSet()":                                "java.base/java/util/stream/Collectors.html#toSet()",
  "Collectors.toUnmodifiableList()":                   "java.base/java/util/stream/Collectors.html#toUnmodifiableList()",
  "Collectors.toUnmodifiableSet()":                    "java.base/java/util/stream/Collectors.html#toUnmodifiableSet()",

  "DoubleStream":                                      "java.base/java/util/stream/DoubleStream.html",

  "IntStream":                                         "java.base/java/util/stream/IntStream.html",
  "IntStream.average()":                               "java.base/java/util/stream/IntStream.html#average()",
  "IntStream.boxed()":                                 "java.base/java/util/stream/IntStream.html#boxed()",
  "IntStream.collect(Supplier,ObjIntConsumer,BiConsumer)": "java.base/java/util/stream/IntStream.html#collect(java.util.function.Supplier,java.util.function.ObjIntConsumer,java.util.function.BiConsumer)",
  "IntStream.mapToObj(IntFunction)":                   "java.base/java/util/stream/IntStream.html#mapToObj(java.util.function.IntFunction)",
  "IntStream.max()":                                   "java.base/java/util/stream/IntStream.html#max()",
  "IntStream.min()":                                   "java.base/java/util/stream/IntStream.html#min()",
  "IntStream.range(int,int)":                          "java.base/java/util/stream/IntStream.html#range(int,int)",
  "IntStream.rangeClosed(int,int)":                    "java.base/java/util/stream/IntStream.html#rangeClosed(int,int)",
  "IntStream.sum()":                                   "java.base/java/util/stream/IntStream.html#sum()",
  "IntStream.summaryStatistics()":                     "java.base/java/util/stream/IntStream.html#summaryStatistics()",

  "LongStream":                                        "java.base/java/util/stream/LongStream.html",
  "LongStream.range(long,long)":                       "java.base/java/util/stream/LongStream.html#range(long,long)",

  "Stream":                                            "java.base/java/util/stream/Stream.html",
  "Stream.allMatch(Predicate)":                        "java.base/java/util/stream/Stream.html#allMatch(java.util.function.Predicate)",
  "Stream.anyMatch(Predicate)":                        "java.base/java/util/stream/Stream.html#anyMatch(java.util.function.Predicate)",
  "Stream.concat(Stream,Stream)":                      "java.base/java/util/stream/Stream.html#concat(java.util.stream.Stream,java.util.stream.Stream)",
  "Stream.count()":                                    "java.base/java/util/stream/Stream.html#count()",
  "Stream.distinct()":                                 "java.base/java/util/stream/Stream.html#distinct()",
  "Stream.dropWhile(Predicate)":                       "java.base/java/util/stream/Stream.html#dropWhile(java.util.function.Predicate)",
  "Stream.filter(Predicate)":                          "java.base/java/util/stream/Stream.html#filter(java.util.function.Predicate)",
  "Stream.findAny()":                                  "java.base/java/util/stream/Stream.html#findAny()",
  "Stream.findFirst()":                                "java.base/java/util/stream/Stream.html#findFirst()",
  "Stream.flatMap(Function)":                          "java.base/java/util/stream/Stream.html#flatMap(java.util.function.Function)",
  "Stream.forEach(Consumer)":                          "java.base/java/util/stream/Stream.html#forEach(java.util.function.Consumer)",
  "Stream.generate(Supplier)":                         "java.base/java/util/stream/Stream.html#generate(java.util.function.Supplier)",
  "Stream.iterate(T,UnaryOperator)":                   "java.base/java/util/stream/Stream.html#iterate(T,java.util.function.UnaryOperator)",
  "Stream.limit(long)":                                "java.base/java/util/stream/Stream.html#limit(long)",
  "Stream.map(Function)":                              "java.base/java/util/stream/Stream.html#map(java.util.function.Function)",
  "Stream.mapMulti(BiConsumer)":                       "java.base/java/util/stream/Stream.html#mapMulti(java.util.function.BiConsumer)",
  "Stream.mapToDouble(ToDoubleFunction)":              "java.base/java/util/stream/Stream.html#mapToDouble(java.util.function.ToDoubleFunction)",
  "Stream.mapToInt(ToIntFunction)":                    "java.base/java/util/stream/Stream.html#mapToInt(java.util.function.ToIntFunction)",
  "Stream.mapToLong(ToLongFunction)":                  "java.base/java/util/stream/Stream.html#mapToLong(java.util.function.ToLongFunction)",
  "Stream.max(Comparator)":                            "java.base/java/util/stream/Stream.html#max(java.util.Comparator)",
  "Stream.noneMatch(Predicate)":                       "java.base/java/util/stream/Stream.html#noneMatch(java.util.function.Predicate)",
  "Stream.of()":                                       "java.base/java/util/stream/Stream.html#of(T...)",
  "Stream.peek(Consumer)":                             "java.base/java/util/stream/Stream.html#peek(java.util.function.Consumer)",
  "Stream.reduce(BinaryOperator)":                     "java.base/java/util/stream/Stream.html#reduce(java.util.function.BinaryOperator)",
  "Stream.skip(long)":                                 "java.base/java/util/stream/Stream.html#skip(long)",
  "Stream.sorted()":                                   "java.base/java/util/stream/Stream.html#sorted()",
  "Stream.takeWhile(Predicate)":                       "java.base/java/util/stream/Stream.html#takeWhile(java.util.function.Predicate)",
  "Stream.toArray()":                                  "java.base/java/util/stream/Stream.html#toArray()",
  "Stream.toList()":                                   "java.base/java/util/stream/Stream.html#toList()",

  "HttpClient.send(HttpRequest,HttpResponse.BodyHandler)":  "java.net.http/java/net/http/HttpClient.html#send(java.net.http.HttpRequest,java.net.http.HttpResponse.BodyHandler)",
  "HttpResponse.BodyHandlers.ofLines()":                    "java.net.http/java/net/http/HttpResponse.BodyHandlers.html#ofLines()",

  "AccessibleObject.setAccessible(boolean)":           "java.base/java/lang/reflect/AccessibleObject.html#setAccessible(boolean)",

  "Driver":                                            "java.sql/java/sql/Driver.html",
  "Driver.getParentLogger()":                          "java.sql/java/sql/Driver.html#getParentLogger()",

  "ServiceLoader":                                     "java.base/java/util/ServiceLoader.html",

  "Cipher.doFinal()":                                  "java.base/javax/crypto/Cipher.html#doFinal()",
  "KeyPairGenerator":                                  "java.base/java/security/KeyPairGenerator.html",
  "MessageDigest":                                     "java.base/java/security/MessageDigest.html",
  "Security.getProviders()":                           "java.base/java/security/Security.html#getProviders()",
  "Security.addProvider(java.security.Provider)":      "java.base/java/security/Security.html#addProvider(java.security.Provider)",
  "Security.insertProviderAt":                         "java.base/java/security/Security.html#insertProviderAt(java.security.Provider,int)"
}